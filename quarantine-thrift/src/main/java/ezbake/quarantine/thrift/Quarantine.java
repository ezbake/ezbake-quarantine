/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.quarantine.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Quarantine {

  public interface Iface extends ezbake.base.thrift.EzBakeBaseService.Iface {

    /**
     * Send an object to quarantine. The object's status will be set to QUARANTINED if the serializable flag is set
     * to true, otherwise it will be CANNOT_BE_REINGESTED as it cannot be reingested if it is not a serializable object.
     * The error parameter is required and is used to correlate objects that were sent to Quarantine for similar reasons.
     * For example, if the object was quarantined because a service was down, then the error string may read:
     *    "Could not index object because the Warehouse service is down".
     * The additional metadata object is optional (set to null if not used), and can be used to provide additional contextual
     * information. For example, the warehouse URI for the object being parsed may be useful (if the raw data is in the warehouse).
     * One could also add a full stacktrace for more detailed error information.
     * 
     * @param qo
     * @param error
     * @param additionalMetadata
     * @param token
     */
    public void sendToQuarantine(QuarantinedObject qo, String error, AdditionalMetadata additionalMetadata, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException;

    /**
     * Returns a list of IDs of thrift objects that have the provided status. If the status is ALL then every object
     * for this pipeline will be returned.
     * 
     * @param pipelineId
     * @param statuses
     * @param pageNumber
     * @param pageSize
     * @param token
     */
    public List<String> getObjectsForPipeline(String pipelineId, Set<ObjectStatus> statuses, int pageNumber, int pageSize, ezbake.base.thrift.EzSecurityToken token) throws ObjectNotQuarantinedException, org.apache.thrift.TException;

    /**
     * Returns a map of Pipe ID to number of events in that Pipe. The number of events can be faceted based on the object status
     * that is provided in the call.
     * 
     * @param pipelineId
     * @param statuses
     * @param token
     */
    public Set<EventWithCount> getObjectCountPerPipe(String pipelineId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException;

    /**
     * Gets the latest event for the given pipeline.
     * 
     * @param pipelineId
     * @param statuses
     * @param token
     */
    public EventWithCount getLatestEventForPipeline(String pipelineId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException;

    /**
     * Gets the latest event for the given pipeline and pipe.
     * 
     * @param pipelineId
     * @param pipeId
     * @param statuses
     * @param token
     */
    public QuarantineEvent getLatestEventForPipe(String pipelineId, String pipeId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException;

    /**
     * Returns a map of Event text to count for a specific pipe in a pipeline. This can be used to get the different error messages,
     * and their corresponding counts per Pipe.
     * 
     * @param pipelineId
     * @param pipeId
     * @param statuses
     * @param token
     */
    public Set<EventWithCount> getEventCountPerPipe(String pipelineId, String pipeId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException;

    /**
     * Returns count of the aggregated count of events in all pipes for the given pipelineId
     * 
     * @param pipelineId
     * @param pipeId
     * @param statuses
     * @param token
     */
    public long getCountPerPipe(String pipelineId, String pipeId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException;

    /**
     * Returns a list of IDs of quarantined objects that correspond to the given pipeline ID, pipe ID, event (error or status update message), and status
     * 
     * @param pipelineId
     * @param pipeId
     * @param event
     * @param statuses
     * @param pageNumber
     * @param pageSize
     * @param token
     */
    public IdsResponse getObjectsForPipeAndEvent(String pipelineId, String pipeId, String event, Set<ObjectStatus> statuses, int pageNumber, int pageSize, ezbake.base.thrift.EzSecurityToken token) throws ObjectNotQuarantinedException, org.apache.thrift.TException;

    /**
     * Gets a list of quarantined objects by ID.
     * 
     * @param ids
     * @param token
     */
    public List<QuarantineResult> getQuarantinedObjects(List<String> ids, ezbake.base.thrift.EzSecurityToken token) throws ObjectNotQuarantinedException, org.apache.thrift.TException;

    /**
     * Updates the entries corresponding to the given list of IDs to the provided status.
     * 
     * @param ids
     * @param status
     * @param updateComment
     * @param token
     */
    public void updateStatus(List<String> ids, ObjectStatus status, String updateComment, ezbake.base.thrift.EzSecurityToken token) throws InvalidUpdateException, org.apache.thrift.TException;

    public void updateStatusOfEvent(String pipelineId, String pipeId, ObjectStatus oldStatus, ObjectStatus newStatus, String oldEvent, String updateComment, ezbake.base.thrift.EzSecurityToken token) throws InvalidUpdateException, org.apache.thrift.TException;

    /**
     * Deletes the provided list of object IDs from quarantine.
     * 
     * @param ids
     * @param token
     */
    public void deleteFromQuarantine(List<String> ids, ezbake.base.thrift.EzSecurityToken token) throws ObjectNotQuarantinedException, org.apache.thrift.TException;

    /**
     * Exports quarantined objects so that they can be imported into a different instance of Quarantine.
     * 
     * @param ids
     * @param key
     * @param token
     */
    public ByteBuffer exportData(List<String> ids, String key, ezbake.base.thrift.EzSecurityToken token) throws ObjectNotQuarantinedException, org.apache.thrift.TException;

    /**
     * Imports quarantined objects that have been exported from another instance of Quarantine.
     * 
     * @param dataToImport
     * @param key
     * @param token
     */
    public ImportResult importData(ByteBuffer dataToImport, String key, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException;

    public void deleteObjectsByEvent(String pipelineId, String pipeId, ObjectStatus status, String eventText, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException;

    public List<String> getPipelinesForUser(ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends ezbake.base.thrift.EzBakeBaseService .AsyncIface {

    public void sendToQuarantine(QuarantinedObject qo, String error, AdditionalMetadata additionalMetadata, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getObjectsForPipeline(String pipelineId, Set<ObjectStatus> statuses, int pageNumber, int pageSize, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getObjectCountPerPipe(String pipelineId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLatestEventForPipeline(String pipelineId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLatestEventForPipe(String pipelineId, String pipeId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEventCountPerPipe(String pipelineId, String pipeId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCountPerPipe(String pipelineId, String pipeId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getObjectsForPipeAndEvent(String pipelineId, String pipeId, String event, Set<ObjectStatus> statuses, int pageNumber, int pageSize, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getQuarantinedObjects(List<String> ids, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateStatus(List<String> ids, ObjectStatus status, String updateComment, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateStatusOfEvent(String pipelineId, String pipeId, ObjectStatus oldStatus, ObjectStatus newStatus, String oldEvent, String updateComment, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteFromQuarantine(List<String> ids, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exportData(List<String> ids, String key, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void importData(ByteBuffer dataToImport, String key, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteObjectsByEvent(String pipelineId, String pipeId, ObjectStatus status, String eventText, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPipelinesForUser(ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ezbake.base.thrift.EzBakeBaseService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void sendToQuarantine(QuarantinedObject qo, String error, AdditionalMetadata additionalMetadata, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      send_sendToQuarantine(qo, error, additionalMetadata, token);
    }

    public void send_sendToQuarantine(QuarantinedObject qo, String error, AdditionalMetadata additionalMetadata, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      sendToQuarantine_args args = new sendToQuarantine_args();
      args.setQo(qo);
      args.setError(error);
      args.setAdditionalMetadata(additionalMetadata);
      args.setToken(token);
      sendBase("sendToQuarantine", args);
    }

    public List<String> getObjectsForPipeline(String pipelineId, Set<ObjectStatus> statuses, int pageNumber, int pageSize, ezbake.base.thrift.EzSecurityToken token) throws ObjectNotQuarantinedException, org.apache.thrift.TException
    {
      send_getObjectsForPipeline(pipelineId, statuses, pageNumber, pageSize, token);
      return recv_getObjectsForPipeline();
    }

    public void send_getObjectsForPipeline(String pipelineId, Set<ObjectStatus> statuses, int pageNumber, int pageSize, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      getObjectsForPipeline_args args = new getObjectsForPipeline_args();
      args.setPipelineId(pipelineId);
      args.setStatuses(statuses);
      args.setPageNumber(pageNumber);
      args.setPageSize(pageSize);
      args.setToken(token);
      sendBase("getObjectsForPipeline", args);
    }

    public List<String> recv_getObjectsForPipeline() throws ObjectNotQuarantinedException, org.apache.thrift.TException
    {
      getObjectsForPipeline_result result = new getObjectsForPipeline_result();
      receiveBase(result, "getObjectsForPipeline");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getObjectsForPipeline failed: unknown result");
    }

    public Set<EventWithCount> getObjectCountPerPipe(String pipelineId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      send_getObjectCountPerPipe(pipelineId, statuses, token);
      return recv_getObjectCountPerPipe();
    }

    public void send_getObjectCountPerPipe(String pipelineId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      getObjectCountPerPipe_args args = new getObjectCountPerPipe_args();
      args.setPipelineId(pipelineId);
      args.setStatuses(statuses);
      args.setToken(token);
      sendBase("getObjectCountPerPipe", args);
    }

    public Set<EventWithCount> recv_getObjectCountPerPipe() throws org.apache.thrift.TException
    {
      getObjectCountPerPipe_result result = new getObjectCountPerPipe_result();
      receiveBase(result, "getObjectCountPerPipe");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getObjectCountPerPipe failed: unknown result");
    }

    public EventWithCount getLatestEventForPipeline(String pipelineId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      send_getLatestEventForPipeline(pipelineId, statuses, token);
      return recv_getLatestEventForPipeline();
    }

    public void send_getLatestEventForPipeline(String pipelineId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      getLatestEventForPipeline_args args = new getLatestEventForPipeline_args();
      args.setPipelineId(pipelineId);
      args.setStatuses(statuses);
      args.setToken(token);
      sendBase("getLatestEventForPipeline", args);
    }

    public EventWithCount recv_getLatestEventForPipeline() throws org.apache.thrift.TException
    {
      getLatestEventForPipeline_result result = new getLatestEventForPipeline_result();
      receiveBase(result, "getLatestEventForPipeline");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLatestEventForPipeline failed: unknown result");
    }

    public QuarantineEvent getLatestEventForPipe(String pipelineId, String pipeId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      send_getLatestEventForPipe(pipelineId, pipeId, statuses, token);
      return recv_getLatestEventForPipe();
    }

    public void send_getLatestEventForPipe(String pipelineId, String pipeId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      getLatestEventForPipe_args args = new getLatestEventForPipe_args();
      args.setPipelineId(pipelineId);
      args.setPipeId(pipeId);
      args.setStatuses(statuses);
      args.setToken(token);
      sendBase("getLatestEventForPipe", args);
    }

    public QuarantineEvent recv_getLatestEventForPipe() throws org.apache.thrift.TException
    {
      getLatestEventForPipe_result result = new getLatestEventForPipe_result();
      receiveBase(result, "getLatestEventForPipe");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLatestEventForPipe failed: unknown result");
    }

    public Set<EventWithCount> getEventCountPerPipe(String pipelineId, String pipeId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      send_getEventCountPerPipe(pipelineId, pipeId, statuses, token);
      return recv_getEventCountPerPipe();
    }

    public void send_getEventCountPerPipe(String pipelineId, String pipeId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      getEventCountPerPipe_args args = new getEventCountPerPipe_args();
      args.setPipelineId(pipelineId);
      args.setPipeId(pipeId);
      args.setStatuses(statuses);
      args.setToken(token);
      sendBase("getEventCountPerPipe", args);
    }

    public Set<EventWithCount> recv_getEventCountPerPipe() throws org.apache.thrift.TException
    {
      getEventCountPerPipe_result result = new getEventCountPerPipe_result();
      receiveBase(result, "getEventCountPerPipe");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEventCountPerPipe failed: unknown result");
    }

    public long getCountPerPipe(String pipelineId, String pipeId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      send_getCountPerPipe(pipelineId, pipeId, statuses, token);
      return recv_getCountPerPipe();
    }

    public void send_getCountPerPipe(String pipelineId, String pipeId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      getCountPerPipe_args args = new getCountPerPipe_args();
      args.setPipelineId(pipelineId);
      args.setPipeId(pipeId);
      args.setStatuses(statuses);
      args.setToken(token);
      sendBase("getCountPerPipe", args);
    }

    public long recv_getCountPerPipe() throws org.apache.thrift.TException
    {
      getCountPerPipe_result result = new getCountPerPipe_result();
      receiveBase(result, "getCountPerPipe");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCountPerPipe failed: unknown result");
    }

    public IdsResponse getObjectsForPipeAndEvent(String pipelineId, String pipeId, String event, Set<ObjectStatus> statuses, int pageNumber, int pageSize, ezbake.base.thrift.EzSecurityToken token) throws ObjectNotQuarantinedException, org.apache.thrift.TException
    {
      send_getObjectsForPipeAndEvent(pipelineId, pipeId, event, statuses, pageNumber, pageSize, token);
      return recv_getObjectsForPipeAndEvent();
    }

    public void send_getObjectsForPipeAndEvent(String pipelineId, String pipeId, String event, Set<ObjectStatus> statuses, int pageNumber, int pageSize, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      getObjectsForPipeAndEvent_args args = new getObjectsForPipeAndEvent_args();
      args.setPipelineId(pipelineId);
      args.setPipeId(pipeId);
      args.setEvent(event);
      args.setStatuses(statuses);
      args.setPageNumber(pageNumber);
      args.setPageSize(pageSize);
      args.setToken(token);
      sendBase("getObjectsForPipeAndEvent", args);
    }

    public IdsResponse recv_getObjectsForPipeAndEvent() throws ObjectNotQuarantinedException, org.apache.thrift.TException
    {
      getObjectsForPipeAndEvent_result result = new getObjectsForPipeAndEvent_result();
      receiveBase(result, "getObjectsForPipeAndEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getObjectsForPipeAndEvent failed: unknown result");
    }

    public List<QuarantineResult> getQuarantinedObjects(List<String> ids, ezbake.base.thrift.EzSecurityToken token) throws ObjectNotQuarantinedException, org.apache.thrift.TException
    {
      send_getQuarantinedObjects(ids, token);
      return recv_getQuarantinedObjects();
    }

    public void send_getQuarantinedObjects(List<String> ids, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      getQuarantinedObjects_args args = new getQuarantinedObjects_args();
      args.setIds(ids);
      args.setToken(token);
      sendBase("getQuarantinedObjects", args);
    }

    public List<QuarantineResult> recv_getQuarantinedObjects() throws ObjectNotQuarantinedException, org.apache.thrift.TException
    {
      getQuarantinedObjects_result result = new getQuarantinedObjects_result();
      receiveBase(result, "getQuarantinedObjects");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getQuarantinedObjects failed: unknown result");
    }

    public void updateStatus(List<String> ids, ObjectStatus status, String updateComment, ezbake.base.thrift.EzSecurityToken token) throws InvalidUpdateException, org.apache.thrift.TException
    {
      send_updateStatus(ids, status, updateComment, token);
      recv_updateStatus();
    }

    public void send_updateStatus(List<String> ids, ObjectStatus status, String updateComment, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      updateStatus_args args = new updateStatus_args();
      args.setIds(ids);
      args.setStatus(status);
      args.setUpdateComment(updateComment);
      args.setToken(token);
      sendBase("updateStatus", args);
    }

    public void recv_updateStatus() throws InvalidUpdateException, org.apache.thrift.TException
    {
      updateStatus_result result = new updateStatus_result();
      receiveBase(result, "updateStatus");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateStatusOfEvent(String pipelineId, String pipeId, ObjectStatus oldStatus, ObjectStatus newStatus, String oldEvent, String updateComment, ezbake.base.thrift.EzSecurityToken token) throws InvalidUpdateException, org.apache.thrift.TException
    {
      send_updateStatusOfEvent(pipelineId, pipeId, oldStatus, newStatus, oldEvent, updateComment, token);
      recv_updateStatusOfEvent();
    }

    public void send_updateStatusOfEvent(String pipelineId, String pipeId, ObjectStatus oldStatus, ObjectStatus newStatus, String oldEvent, String updateComment, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      updateStatusOfEvent_args args = new updateStatusOfEvent_args();
      args.setPipelineId(pipelineId);
      args.setPipeId(pipeId);
      args.setOldStatus(oldStatus);
      args.setNewStatus(newStatus);
      args.setOldEvent(oldEvent);
      args.setUpdateComment(updateComment);
      args.setToken(token);
      sendBase("updateStatusOfEvent", args);
    }

    public void recv_updateStatusOfEvent() throws InvalidUpdateException, org.apache.thrift.TException
    {
      updateStatusOfEvent_result result = new updateStatusOfEvent_result();
      receiveBase(result, "updateStatusOfEvent");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void deleteFromQuarantine(List<String> ids, ezbake.base.thrift.EzSecurityToken token) throws ObjectNotQuarantinedException, org.apache.thrift.TException
    {
      send_deleteFromQuarantine(ids, token);
      recv_deleteFromQuarantine();
    }

    public void send_deleteFromQuarantine(List<String> ids, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      deleteFromQuarantine_args args = new deleteFromQuarantine_args();
      args.setIds(ids);
      args.setToken(token);
      sendBase("deleteFromQuarantine", args);
    }

    public void recv_deleteFromQuarantine() throws ObjectNotQuarantinedException, org.apache.thrift.TException
    {
      deleteFromQuarantine_result result = new deleteFromQuarantine_result();
      receiveBase(result, "deleteFromQuarantine");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public ByteBuffer exportData(List<String> ids, String key, ezbake.base.thrift.EzSecurityToken token) throws ObjectNotQuarantinedException, org.apache.thrift.TException
    {
      send_exportData(ids, key, token);
      return recv_exportData();
    }

    public void send_exportData(List<String> ids, String key, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      exportData_args args = new exportData_args();
      args.setIds(ids);
      args.setKey(key);
      args.setToken(token);
      sendBase("exportData", args);
    }

    public ByteBuffer recv_exportData() throws ObjectNotQuarantinedException, org.apache.thrift.TException
    {
      exportData_result result = new exportData_result();
      receiveBase(result, "exportData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exportData failed: unknown result");
    }

    public ImportResult importData(ByteBuffer dataToImport, String key, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      send_importData(dataToImport, key, token);
      return recv_importData();
    }

    public void send_importData(ByteBuffer dataToImport, String key, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      importData_args args = new importData_args();
      args.setDataToImport(dataToImport);
      args.setKey(key);
      args.setToken(token);
      sendBase("importData", args);
    }

    public ImportResult recv_importData() throws org.apache.thrift.TException
    {
      importData_result result = new importData_result();
      receiveBase(result, "importData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "importData failed: unknown result");
    }

    public void deleteObjectsByEvent(String pipelineId, String pipeId, ObjectStatus status, String eventText, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      send_deleteObjectsByEvent(pipelineId, pipeId, status, eventText, token);
      recv_deleteObjectsByEvent();
    }

    public void send_deleteObjectsByEvent(String pipelineId, String pipeId, ObjectStatus status, String eventText, ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      deleteObjectsByEvent_args args = new deleteObjectsByEvent_args();
      args.setPipelineId(pipelineId);
      args.setPipeId(pipeId);
      args.setStatus(status);
      args.setEventText(eventText);
      args.setToken(token);
      sendBase("deleteObjectsByEvent", args);
    }

    public void recv_deleteObjectsByEvent() throws org.apache.thrift.TException
    {
      deleteObjectsByEvent_result result = new deleteObjectsByEvent_result();
      receiveBase(result, "deleteObjectsByEvent");
      return;
    }

    public List<String> getPipelinesForUser(ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      send_getPipelinesForUser(token);
      return recv_getPipelinesForUser();
    }

    public void send_getPipelinesForUser(ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      getPipelinesForUser_args args = new getPipelinesForUser_args();
      args.setToken(token);
      sendBase("getPipelinesForUser", args);
    }

    public List<String> recv_getPipelinesForUser() throws org.apache.thrift.TException
    {
      getPipelinesForUser_result result = new getPipelinesForUser_result();
      receiveBase(result, "getPipelinesForUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPipelinesForUser failed: unknown result");
    }

  }
  public static class AsyncClient extends ezbake.base.thrift.EzBakeBaseService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void sendToQuarantine(QuarantinedObject qo, String error, AdditionalMetadata additionalMetadata, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendToQuarantine_call method_call = new sendToQuarantine_call(qo, error, additionalMetadata, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendToQuarantine_call extends org.apache.thrift.async.TAsyncMethodCall {
      private QuarantinedObject qo;
      private String error;
      private AdditionalMetadata additionalMetadata;
      private ezbake.base.thrift.EzSecurityToken token;
      public sendToQuarantine_call(QuarantinedObject qo, String error, AdditionalMetadata additionalMetadata, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.qo = qo;
        this.error = error;
        this.additionalMetadata = additionalMetadata;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendToQuarantine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendToQuarantine_args args = new sendToQuarantine_args();
        args.setQo(qo);
        args.setError(error);
        args.setAdditionalMetadata(additionalMetadata);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void getObjectsForPipeline(String pipelineId, Set<ObjectStatus> statuses, int pageNumber, int pageSize, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getObjectsForPipeline_call method_call = new getObjectsForPipeline_call(pipelineId, statuses, pageNumber, pageSize, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getObjectsForPipeline_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pipelineId;
      private Set<ObjectStatus> statuses;
      private int pageNumber;
      private int pageSize;
      private ezbake.base.thrift.EzSecurityToken token;
      public getObjectsForPipeline_call(String pipelineId, Set<ObjectStatus> statuses, int pageNumber, int pageSize, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pipelineId = pipelineId;
        this.statuses = statuses;
        this.pageNumber = pageNumber;
        this.pageSize = pageSize;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getObjectsForPipeline", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getObjectsForPipeline_args args = new getObjectsForPipeline_args();
        args.setPipelineId(pipelineId);
        args.setStatuses(statuses);
        args.setPageNumber(pageNumber);
        args.setPageSize(pageSize);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws ObjectNotQuarantinedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getObjectsForPipeline();
      }
    }

    public void getObjectCountPerPipe(String pipelineId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getObjectCountPerPipe_call method_call = new getObjectCountPerPipe_call(pipelineId, statuses, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getObjectCountPerPipe_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pipelineId;
      private Set<ObjectStatus> statuses;
      private ezbake.base.thrift.EzSecurityToken token;
      public getObjectCountPerPipe_call(String pipelineId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pipelineId = pipelineId;
        this.statuses = statuses;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getObjectCountPerPipe", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getObjectCountPerPipe_args args = new getObjectCountPerPipe_args();
        args.setPipelineId(pipelineId);
        args.setStatuses(statuses);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<EventWithCount> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getObjectCountPerPipe();
      }
    }

    public void getLatestEventForPipeline(String pipelineId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLatestEventForPipeline_call method_call = new getLatestEventForPipeline_call(pipelineId, statuses, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLatestEventForPipeline_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pipelineId;
      private Set<ObjectStatus> statuses;
      private ezbake.base.thrift.EzSecurityToken token;
      public getLatestEventForPipeline_call(String pipelineId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pipelineId = pipelineId;
        this.statuses = statuses;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLatestEventForPipeline", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLatestEventForPipeline_args args = new getLatestEventForPipeline_args();
        args.setPipelineId(pipelineId);
        args.setStatuses(statuses);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public EventWithCount getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLatestEventForPipeline();
      }
    }

    public void getLatestEventForPipe(String pipelineId, String pipeId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLatestEventForPipe_call method_call = new getLatestEventForPipe_call(pipelineId, pipeId, statuses, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLatestEventForPipe_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pipelineId;
      private String pipeId;
      private Set<ObjectStatus> statuses;
      private ezbake.base.thrift.EzSecurityToken token;
      public getLatestEventForPipe_call(String pipelineId, String pipeId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pipelineId = pipelineId;
        this.pipeId = pipeId;
        this.statuses = statuses;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLatestEventForPipe", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLatestEventForPipe_args args = new getLatestEventForPipe_args();
        args.setPipelineId(pipelineId);
        args.setPipeId(pipeId);
        args.setStatuses(statuses);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public QuarantineEvent getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLatestEventForPipe();
      }
    }

    public void getEventCountPerPipe(String pipelineId, String pipeId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEventCountPerPipe_call method_call = new getEventCountPerPipe_call(pipelineId, pipeId, statuses, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEventCountPerPipe_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pipelineId;
      private String pipeId;
      private Set<ObjectStatus> statuses;
      private ezbake.base.thrift.EzSecurityToken token;
      public getEventCountPerPipe_call(String pipelineId, String pipeId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pipelineId = pipelineId;
        this.pipeId = pipeId;
        this.statuses = statuses;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEventCountPerPipe", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEventCountPerPipe_args args = new getEventCountPerPipe_args();
        args.setPipelineId(pipelineId);
        args.setPipeId(pipeId);
        args.setStatuses(statuses);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<EventWithCount> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEventCountPerPipe();
      }
    }

    public void getCountPerPipe(String pipelineId, String pipeId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCountPerPipe_call method_call = new getCountPerPipe_call(pipelineId, pipeId, statuses, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCountPerPipe_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pipelineId;
      private String pipeId;
      private Set<ObjectStatus> statuses;
      private ezbake.base.thrift.EzSecurityToken token;
      public getCountPerPipe_call(String pipelineId, String pipeId, Set<ObjectStatus> statuses, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pipelineId = pipelineId;
        this.pipeId = pipeId;
        this.statuses = statuses;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCountPerPipe", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCountPerPipe_args args = new getCountPerPipe_args();
        args.setPipelineId(pipelineId);
        args.setPipeId(pipeId);
        args.setStatuses(statuses);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCountPerPipe();
      }
    }

    public void getObjectsForPipeAndEvent(String pipelineId, String pipeId, String event, Set<ObjectStatus> statuses, int pageNumber, int pageSize, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getObjectsForPipeAndEvent_call method_call = new getObjectsForPipeAndEvent_call(pipelineId, pipeId, event, statuses, pageNumber, pageSize, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getObjectsForPipeAndEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pipelineId;
      private String pipeId;
      private String event;
      private Set<ObjectStatus> statuses;
      private int pageNumber;
      private int pageSize;
      private ezbake.base.thrift.EzSecurityToken token;
      public getObjectsForPipeAndEvent_call(String pipelineId, String pipeId, String event, Set<ObjectStatus> statuses, int pageNumber, int pageSize, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pipelineId = pipelineId;
        this.pipeId = pipeId;
        this.event = event;
        this.statuses = statuses;
        this.pageNumber = pageNumber;
        this.pageSize = pageSize;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getObjectsForPipeAndEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getObjectsForPipeAndEvent_args args = new getObjectsForPipeAndEvent_args();
        args.setPipelineId(pipelineId);
        args.setPipeId(pipeId);
        args.setEvent(event);
        args.setStatuses(statuses);
        args.setPageNumber(pageNumber);
        args.setPageSize(pageSize);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IdsResponse getResult() throws ObjectNotQuarantinedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getObjectsForPipeAndEvent();
      }
    }

    public void getQuarantinedObjects(List<String> ids, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getQuarantinedObjects_call method_call = new getQuarantinedObjects_call(ids, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getQuarantinedObjects_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> ids;
      private ezbake.base.thrift.EzSecurityToken token;
      public getQuarantinedObjects_call(List<String> ids, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getQuarantinedObjects", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getQuarantinedObjects_args args = new getQuarantinedObjects_args();
        args.setIds(ids);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<QuarantineResult> getResult() throws ObjectNotQuarantinedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getQuarantinedObjects();
      }
    }

    public void updateStatus(List<String> ids, ObjectStatus status, String updateComment, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateStatus_call method_call = new updateStatus_call(ids, status, updateComment, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> ids;
      private ObjectStatus status;
      private String updateComment;
      private ezbake.base.thrift.EzSecurityToken token;
      public updateStatus_call(List<String> ids, ObjectStatus status, String updateComment, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.status = status;
        this.updateComment = updateComment;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateStatus_args args = new updateStatus_args();
        args.setIds(ids);
        args.setStatus(status);
        args.setUpdateComment(updateComment);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidUpdateException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateStatus();
      }
    }

    public void updateStatusOfEvent(String pipelineId, String pipeId, ObjectStatus oldStatus, ObjectStatus newStatus, String oldEvent, String updateComment, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateStatusOfEvent_call method_call = new updateStatusOfEvent_call(pipelineId, pipeId, oldStatus, newStatus, oldEvent, updateComment, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateStatusOfEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pipelineId;
      private String pipeId;
      private ObjectStatus oldStatus;
      private ObjectStatus newStatus;
      private String oldEvent;
      private String updateComment;
      private ezbake.base.thrift.EzSecurityToken token;
      public updateStatusOfEvent_call(String pipelineId, String pipeId, ObjectStatus oldStatus, ObjectStatus newStatus, String oldEvent, String updateComment, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pipelineId = pipelineId;
        this.pipeId = pipeId;
        this.oldStatus = oldStatus;
        this.newStatus = newStatus;
        this.oldEvent = oldEvent;
        this.updateComment = updateComment;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStatusOfEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateStatusOfEvent_args args = new updateStatusOfEvent_args();
        args.setPipelineId(pipelineId);
        args.setPipeId(pipeId);
        args.setOldStatus(oldStatus);
        args.setNewStatus(newStatus);
        args.setOldEvent(oldEvent);
        args.setUpdateComment(updateComment);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidUpdateException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateStatusOfEvent();
      }
    }

    public void deleteFromQuarantine(List<String> ids, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteFromQuarantine_call method_call = new deleteFromQuarantine_call(ids, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteFromQuarantine_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> ids;
      private ezbake.base.thrift.EzSecurityToken token;
      public deleteFromQuarantine_call(List<String> ids, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteFromQuarantine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteFromQuarantine_args args = new deleteFromQuarantine_args();
        args.setIds(ids);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ObjectNotQuarantinedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteFromQuarantine();
      }
    }

    public void exportData(List<String> ids, String key, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exportData_call method_call = new exportData_call(ids, key, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exportData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> ids;
      private String key;
      private ezbake.base.thrift.EzSecurityToken token;
      public exportData_call(List<String> ids, String key, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.key = key;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exportData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exportData_args args = new exportData_args();
        args.setIds(ids);
        args.setKey(key);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws ObjectNotQuarantinedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exportData();
      }
    }

    public void importData(ByteBuffer dataToImport, String key, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      importData_call method_call = new importData_call(dataToImport, key, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class importData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer dataToImport;
      private String key;
      private ezbake.base.thrift.EzSecurityToken token;
      public importData_call(ByteBuffer dataToImport, String key, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dataToImport = dataToImport;
        this.key = key;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("importData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        importData_args args = new importData_args();
        args.setDataToImport(dataToImport);
        args.setKey(key);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ImportResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_importData();
      }
    }

    public void deleteObjectsByEvent(String pipelineId, String pipeId, ObjectStatus status, String eventText, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteObjectsByEvent_call method_call = new deleteObjectsByEvent_call(pipelineId, pipeId, status, eventText, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteObjectsByEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pipelineId;
      private String pipeId;
      private ObjectStatus status;
      private String eventText;
      private ezbake.base.thrift.EzSecurityToken token;
      public deleteObjectsByEvent_call(String pipelineId, String pipeId, ObjectStatus status, String eventText, ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pipelineId = pipelineId;
        this.pipeId = pipeId;
        this.status = status;
        this.eventText = eventText;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteObjectsByEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteObjectsByEvent_args args = new deleteObjectsByEvent_args();
        args.setPipelineId(pipelineId);
        args.setPipeId(pipeId);
        args.setStatus(status);
        args.setEventText(eventText);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteObjectsByEvent();
      }
    }

    public void getPipelinesForUser(ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPipelinesForUser_call method_call = new getPipelinesForUser_call(token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPipelinesForUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken token;
      public getPipelinesForUser_call(ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPipelinesForUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPipelinesForUser_args args = new getPipelinesForUser_args();
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPipelinesForUser();
      }
    }

  }

  public static class Processor<I extends Iface> extends ezbake.base.thrift.EzBakeBaseService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("sendToQuarantine", new sendToQuarantine());
      processMap.put("getObjectsForPipeline", new getObjectsForPipeline());
      processMap.put("getObjectCountPerPipe", new getObjectCountPerPipe());
      processMap.put("getLatestEventForPipeline", new getLatestEventForPipeline());
      processMap.put("getLatestEventForPipe", new getLatestEventForPipe());
      processMap.put("getEventCountPerPipe", new getEventCountPerPipe());
      processMap.put("getCountPerPipe", new getCountPerPipe());
      processMap.put("getObjectsForPipeAndEvent", new getObjectsForPipeAndEvent());
      processMap.put("getQuarantinedObjects", new getQuarantinedObjects());
      processMap.put("updateStatus", new updateStatus());
      processMap.put("updateStatusOfEvent", new updateStatusOfEvent());
      processMap.put("deleteFromQuarantine", new deleteFromQuarantine());
      processMap.put("exportData", new exportData());
      processMap.put("importData", new importData());
      processMap.put("deleteObjectsByEvent", new deleteObjectsByEvent());
      processMap.put("getPipelinesForUser", new getPipelinesForUser());
      return processMap;
    }

    public static class sendToQuarantine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendToQuarantine_args> {
      public sendToQuarantine() {
        super("sendToQuarantine");
      }

      public sendToQuarantine_args getEmptyArgsInstance() {
        return new sendToQuarantine_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, sendToQuarantine_args args) throws org.apache.thrift.TException {
        iface.sendToQuarantine(args.qo, args.error, args.additionalMetadata, args.token);
        return null;
      }
    }

    public static class getObjectsForPipeline<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getObjectsForPipeline_args> {
      public getObjectsForPipeline() {
        super("getObjectsForPipeline");
      }

      public getObjectsForPipeline_args getEmptyArgsInstance() {
        return new getObjectsForPipeline_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getObjectsForPipeline_result getResult(I iface, getObjectsForPipeline_args args) throws org.apache.thrift.TException {
        getObjectsForPipeline_result result = new getObjectsForPipeline_result();
        try {
          result.success = iface.getObjectsForPipeline(args.pipelineId, args.statuses, args.pageNumber, args.pageSize, args.token);
        } catch (ObjectNotQuarantinedException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getObjectCountPerPipe<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getObjectCountPerPipe_args> {
      public getObjectCountPerPipe() {
        super("getObjectCountPerPipe");
      }

      public getObjectCountPerPipe_args getEmptyArgsInstance() {
        return new getObjectCountPerPipe_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getObjectCountPerPipe_result getResult(I iface, getObjectCountPerPipe_args args) throws org.apache.thrift.TException {
        getObjectCountPerPipe_result result = new getObjectCountPerPipe_result();
        result.success = iface.getObjectCountPerPipe(args.pipelineId, args.statuses, args.token);
        return result;
      }
    }

    public static class getLatestEventForPipeline<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLatestEventForPipeline_args> {
      public getLatestEventForPipeline() {
        super("getLatestEventForPipeline");
      }

      public getLatestEventForPipeline_args getEmptyArgsInstance() {
        return new getLatestEventForPipeline_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLatestEventForPipeline_result getResult(I iface, getLatestEventForPipeline_args args) throws org.apache.thrift.TException {
        getLatestEventForPipeline_result result = new getLatestEventForPipeline_result();
        result.success = iface.getLatestEventForPipeline(args.pipelineId, args.statuses, args.token);
        return result;
      }
    }

    public static class getLatestEventForPipe<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLatestEventForPipe_args> {
      public getLatestEventForPipe() {
        super("getLatestEventForPipe");
      }

      public getLatestEventForPipe_args getEmptyArgsInstance() {
        return new getLatestEventForPipe_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLatestEventForPipe_result getResult(I iface, getLatestEventForPipe_args args) throws org.apache.thrift.TException {
        getLatestEventForPipe_result result = new getLatestEventForPipe_result();
        result.success = iface.getLatestEventForPipe(args.pipelineId, args.pipeId, args.statuses, args.token);
        return result;
      }
    }

    public static class getEventCountPerPipe<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEventCountPerPipe_args> {
      public getEventCountPerPipe() {
        super("getEventCountPerPipe");
      }

      public getEventCountPerPipe_args getEmptyArgsInstance() {
        return new getEventCountPerPipe_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEventCountPerPipe_result getResult(I iface, getEventCountPerPipe_args args) throws org.apache.thrift.TException {
        getEventCountPerPipe_result result = new getEventCountPerPipe_result();
        result.success = iface.getEventCountPerPipe(args.pipelineId, args.pipeId, args.statuses, args.token);
        return result;
      }
    }

    public static class getCountPerPipe<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCountPerPipe_args> {
      public getCountPerPipe() {
        super("getCountPerPipe");
      }

      public getCountPerPipe_args getEmptyArgsInstance() {
        return new getCountPerPipe_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCountPerPipe_result getResult(I iface, getCountPerPipe_args args) throws org.apache.thrift.TException {
        getCountPerPipe_result result = new getCountPerPipe_result();
        result.success = iface.getCountPerPipe(args.pipelineId, args.pipeId, args.statuses, args.token);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getObjectsForPipeAndEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getObjectsForPipeAndEvent_args> {
      public getObjectsForPipeAndEvent() {
        super("getObjectsForPipeAndEvent");
      }

      public getObjectsForPipeAndEvent_args getEmptyArgsInstance() {
        return new getObjectsForPipeAndEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getObjectsForPipeAndEvent_result getResult(I iface, getObjectsForPipeAndEvent_args args) throws org.apache.thrift.TException {
        getObjectsForPipeAndEvent_result result = new getObjectsForPipeAndEvent_result();
        try {
          result.success = iface.getObjectsForPipeAndEvent(args.pipelineId, args.pipeId, args.event, args.statuses, args.pageNumber, args.pageSize, args.token);
        } catch (ObjectNotQuarantinedException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getQuarantinedObjects<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getQuarantinedObjects_args> {
      public getQuarantinedObjects() {
        super("getQuarantinedObjects");
      }

      public getQuarantinedObjects_args getEmptyArgsInstance() {
        return new getQuarantinedObjects_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getQuarantinedObjects_result getResult(I iface, getQuarantinedObjects_args args) throws org.apache.thrift.TException {
        getQuarantinedObjects_result result = new getQuarantinedObjects_result();
        try {
          result.success = iface.getQuarantinedObjects(args.ids, args.token);
        } catch (ObjectNotQuarantinedException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStatus_args> {
      public updateStatus() {
        super("updateStatus");
      }

      public updateStatus_args getEmptyArgsInstance() {
        return new updateStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateStatus_result getResult(I iface, updateStatus_args args) throws org.apache.thrift.TException {
        updateStatus_result result = new updateStatus_result();
        try {
          iface.updateStatus(args.ids, args.status, args.updateComment, args.token);
        } catch (InvalidUpdateException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateStatusOfEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStatusOfEvent_args> {
      public updateStatusOfEvent() {
        super("updateStatusOfEvent");
      }

      public updateStatusOfEvent_args getEmptyArgsInstance() {
        return new updateStatusOfEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateStatusOfEvent_result getResult(I iface, updateStatusOfEvent_args args) throws org.apache.thrift.TException {
        updateStatusOfEvent_result result = new updateStatusOfEvent_result();
        try {
          iface.updateStatusOfEvent(args.pipelineId, args.pipeId, args.oldStatus, args.newStatus, args.oldEvent, args.updateComment, args.token);
        } catch (InvalidUpdateException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deleteFromQuarantine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFromQuarantine_args> {
      public deleteFromQuarantine() {
        super("deleteFromQuarantine");
      }

      public deleteFromQuarantine_args getEmptyArgsInstance() {
        return new deleteFromQuarantine_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteFromQuarantine_result getResult(I iface, deleteFromQuarantine_args args) throws org.apache.thrift.TException {
        deleteFromQuarantine_result result = new deleteFromQuarantine_result();
        try {
          iface.deleteFromQuarantine(args.ids, args.token);
        } catch (ObjectNotQuarantinedException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class exportData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exportData_args> {
      public exportData() {
        super("exportData");
      }

      public exportData_args getEmptyArgsInstance() {
        return new exportData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exportData_result getResult(I iface, exportData_args args) throws org.apache.thrift.TException {
        exportData_result result = new exportData_result();
        try {
          result.success = iface.exportData(args.ids, args.key, args.token);
        } catch (ObjectNotQuarantinedException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class importData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, importData_args> {
      public importData() {
        super("importData");
      }

      public importData_args getEmptyArgsInstance() {
        return new importData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public importData_result getResult(I iface, importData_args args) throws org.apache.thrift.TException {
        importData_result result = new importData_result();
        result.success = iface.importData(args.dataToImport, args.key, args.token);
        return result;
      }
    }

    public static class deleteObjectsByEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteObjectsByEvent_args> {
      public deleteObjectsByEvent() {
        super("deleteObjectsByEvent");
      }

      public deleteObjectsByEvent_args getEmptyArgsInstance() {
        return new deleteObjectsByEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteObjectsByEvent_result getResult(I iface, deleteObjectsByEvent_args args) throws org.apache.thrift.TException {
        deleteObjectsByEvent_result result = new deleteObjectsByEvent_result();
        iface.deleteObjectsByEvent(args.pipelineId, args.pipeId, args.status, args.eventText, args.token);
        return result;
      }
    }

    public static class getPipelinesForUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPipelinesForUser_args> {
      public getPipelinesForUser() {
        super("getPipelinesForUser");
      }

      public getPipelinesForUser_args getEmptyArgsInstance() {
        return new getPipelinesForUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPipelinesForUser_result getResult(I iface, getPipelinesForUser_args args) throws org.apache.thrift.TException {
        getPipelinesForUser_result result = new getPipelinesForUser_result();
        result.success = iface.getPipelinesForUser(args.token);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends ezbake.base.thrift.EzBakeBaseService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("sendToQuarantine", new sendToQuarantine());
      processMap.put("getObjectsForPipeline", new getObjectsForPipeline());
      processMap.put("getObjectCountPerPipe", new getObjectCountPerPipe());
      processMap.put("getLatestEventForPipeline", new getLatestEventForPipeline());
      processMap.put("getLatestEventForPipe", new getLatestEventForPipe());
      processMap.put("getEventCountPerPipe", new getEventCountPerPipe());
      processMap.put("getCountPerPipe", new getCountPerPipe());
      processMap.put("getObjectsForPipeAndEvent", new getObjectsForPipeAndEvent());
      processMap.put("getQuarantinedObjects", new getQuarantinedObjects());
      processMap.put("updateStatus", new updateStatus());
      processMap.put("updateStatusOfEvent", new updateStatusOfEvent());
      processMap.put("deleteFromQuarantine", new deleteFromQuarantine());
      processMap.put("exportData", new exportData());
      processMap.put("importData", new importData());
      processMap.put("deleteObjectsByEvent", new deleteObjectsByEvent());
      processMap.put("getPipelinesForUser", new getPipelinesForUser());
      return processMap;
    }

    public static class sendToQuarantine<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendToQuarantine_args, Void> {
      public sendToQuarantine() {
        super("sendToQuarantine");
      }

      public sendToQuarantine_args getEmptyArgsInstance() {
        return new sendToQuarantine_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, sendToQuarantine_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendToQuarantine(args.qo, args.error, args.additionalMetadata, args.token,resultHandler);
      }
    }

    public static class getObjectsForPipeline<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getObjectsForPipeline_args, List<String>> {
      public getObjectsForPipeline() {
        super("getObjectsForPipeline");
      }

      public getObjectsForPipeline_args getEmptyArgsInstance() {
        return new getObjectsForPipeline_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getObjectsForPipeline_result result = new getObjectsForPipeline_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getObjectsForPipeline_result result = new getObjectsForPipeline_result();
            if (e instanceof ObjectNotQuarantinedException) {
                        result.e = (ObjectNotQuarantinedException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getObjectsForPipeline_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getObjectsForPipeline(args.pipelineId, args.statuses, args.pageNumber, args.pageSize, args.token,resultHandler);
      }
    }

    public static class getObjectCountPerPipe<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getObjectCountPerPipe_args, Set<EventWithCount>> {
      public getObjectCountPerPipe() {
        super("getObjectCountPerPipe");
      }

      public getObjectCountPerPipe_args getEmptyArgsInstance() {
        return new getObjectCountPerPipe_args();
      }

      public AsyncMethodCallback<Set<EventWithCount>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Set<EventWithCount>>() { 
          public void onComplete(Set<EventWithCount> o) {
            getObjectCountPerPipe_result result = new getObjectCountPerPipe_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getObjectCountPerPipe_result result = new getObjectCountPerPipe_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getObjectCountPerPipe_args args, org.apache.thrift.async.AsyncMethodCallback<Set<EventWithCount>> resultHandler) throws TException {
        iface.getObjectCountPerPipe(args.pipelineId, args.statuses, args.token,resultHandler);
      }
    }

    public static class getLatestEventForPipeline<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLatestEventForPipeline_args, EventWithCount> {
      public getLatestEventForPipeline() {
        super("getLatestEventForPipeline");
      }

      public getLatestEventForPipeline_args getEmptyArgsInstance() {
        return new getLatestEventForPipeline_args();
      }

      public AsyncMethodCallback<EventWithCount> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<EventWithCount>() { 
          public void onComplete(EventWithCount o) {
            getLatestEventForPipeline_result result = new getLatestEventForPipeline_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLatestEventForPipeline_result result = new getLatestEventForPipeline_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLatestEventForPipeline_args args, org.apache.thrift.async.AsyncMethodCallback<EventWithCount> resultHandler) throws TException {
        iface.getLatestEventForPipeline(args.pipelineId, args.statuses, args.token,resultHandler);
      }
    }

    public static class getLatestEventForPipe<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLatestEventForPipe_args, QuarantineEvent> {
      public getLatestEventForPipe() {
        super("getLatestEventForPipe");
      }

      public getLatestEventForPipe_args getEmptyArgsInstance() {
        return new getLatestEventForPipe_args();
      }

      public AsyncMethodCallback<QuarantineEvent> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<QuarantineEvent>() { 
          public void onComplete(QuarantineEvent o) {
            getLatestEventForPipe_result result = new getLatestEventForPipe_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLatestEventForPipe_result result = new getLatestEventForPipe_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLatestEventForPipe_args args, org.apache.thrift.async.AsyncMethodCallback<QuarantineEvent> resultHandler) throws TException {
        iface.getLatestEventForPipe(args.pipelineId, args.pipeId, args.statuses, args.token,resultHandler);
      }
    }

    public static class getEventCountPerPipe<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEventCountPerPipe_args, Set<EventWithCount>> {
      public getEventCountPerPipe() {
        super("getEventCountPerPipe");
      }

      public getEventCountPerPipe_args getEmptyArgsInstance() {
        return new getEventCountPerPipe_args();
      }

      public AsyncMethodCallback<Set<EventWithCount>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Set<EventWithCount>>() { 
          public void onComplete(Set<EventWithCount> o) {
            getEventCountPerPipe_result result = new getEventCountPerPipe_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEventCountPerPipe_result result = new getEventCountPerPipe_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEventCountPerPipe_args args, org.apache.thrift.async.AsyncMethodCallback<Set<EventWithCount>> resultHandler) throws TException {
        iface.getEventCountPerPipe(args.pipelineId, args.pipeId, args.statuses, args.token,resultHandler);
      }
    }

    public static class getCountPerPipe<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCountPerPipe_args, Long> {
      public getCountPerPipe() {
        super("getCountPerPipe");
      }

      public getCountPerPipe_args getEmptyArgsInstance() {
        return new getCountPerPipe_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getCountPerPipe_result result = new getCountPerPipe_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCountPerPipe_result result = new getCountPerPipe_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCountPerPipe_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getCountPerPipe(args.pipelineId, args.pipeId, args.statuses, args.token,resultHandler);
      }
    }

    public static class getObjectsForPipeAndEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getObjectsForPipeAndEvent_args, IdsResponse> {
      public getObjectsForPipeAndEvent() {
        super("getObjectsForPipeAndEvent");
      }

      public getObjectsForPipeAndEvent_args getEmptyArgsInstance() {
        return new getObjectsForPipeAndEvent_args();
      }

      public AsyncMethodCallback<IdsResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IdsResponse>() { 
          public void onComplete(IdsResponse o) {
            getObjectsForPipeAndEvent_result result = new getObjectsForPipeAndEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getObjectsForPipeAndEvent_result result = new getObjectsForPipeAndEvent_result();
            if (e instanceof ObjectNotQuarantinedException) {
                        result.e = (ObjectNotQuarantinedException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getObjectsForPipeAndEvent_args args, org.apache.thrift.async.AsyncMethodCallback<IdsResponse> resultHandler) throws TException {
        iface.getObjectsForPipeAndEvent(args.pipelineId, args.pipeId, args.event, args.statuses, args.pageNumber, args.pageSize, args.token,resultHandler);
      }
    }

    public static class getQuarantinedObjects<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getQuarantinedObjects_args, List<QuarantineResult>> {
      public getQuarantinedObjects() {
        super("getQuarantinedObjects");
      }

      public getQuarantinedObjects_args getEmptyArgsInstance() {
        return new getQuarantinedObjects_args();
      }

      public AsyncMethodCallback<List<QuarantineResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<QuarantineResult>>() { 
          public void onComplete(List<QuarantineResult> o) {
            getQuarantinedObjects_result result = new getQuarantinedObjects_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getQuarantinedObjects_result result = new getQuarantinedObjects_result();
            if (e instanceof ObjectNotQuarantinedException) {
                        result.e = (ObjectNotQuarantinedException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getQuarantinedObjects_args args, org.apache.thrift.async.AsyncMethodCallback<List<QuarantineResult>> resultHandler) throws TException {
        iface.getQuarantinedObjects(args.ids, args.token,resultHandler);
      }
    }

    public static class updateStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateStatus_args, Void> {
      public updateStatus() {
        super("updateStatus");
      }

      public updateStatus_args getEmptyArgsInstance() {
        return new updateStatus_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateStatus_result result = new updateStatus_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateStatus_result result = new updateStatus_result();
            if (e instanceof InvalidUpdateException) {
                        result.e = (InvalidUpdateException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateStatus_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateStatus(args.ids, args.status, args.updateComment, args.token,resultHandler);
      }
    }

    public static class updateStatusOfEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateStatusOfEvent_args, Void> {
      public updateStatusOfEvent() {
        super("updateStatusOfEvent");
      }

      public updateStatusOfEvent_args getEmptyArgsInstance() {
        return new updateStatusOfEvent_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateStatusOfEvent_result result = new updateStatusOfEvent_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateStatusOfEvent_result result = new updateStatusOfEvent_result();
            if (e instanceof InvalidUpdateException) {
                        result.e = (InvalidUpdateException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateStatusOfEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateStatusOfEvent(args.pipelineId, args.pipeId, args.oldStatus, args.newStatus, args.oldEvent, args.updateComment, args.token,resultHandler);
      }
    }

    public static class deleteFromQuarantine<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteFromQuarantine_args, Void> {
      public deleteFromQuarantine() {
        super("deleteFromQuarantine");
      }

      public deleteFromQuarantine_args getEmptyArgsInstance() {
        return new deleteFromQuarantine_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteFromQuarantine_result result = new deleteFromQuarantine_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteFromQuarantine_result result = new deleteFromQuarantine_result();
            if (e instanceof ObjectNotQuarantinedException) {
                        result.e = (ObjectNotQuarantinedException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteFromQuarantine_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteFromQuarantine(args.ids, args.token,resultHandler);
      }
    }

    public static class exportData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exportData_args, ByteBuffer> {
      public exportData() {
        super("exportData");
      }

      public exportData_args getEmptyArgsInstance() {
        return new exportData_args();
      }

      public AsyncMethodCallback<ByteBuffer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ByteBuffer>() { 
          public void onComplete(ByteBuffer o) {
            exportData_result result = new exportData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exportData_result result = new exportData_result();
            if (e instanceof ObjectNotQuarantinedException) {
                        result.e = (ObjectNotQuarantinedException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exportData_args args, org.apache.thrift.async.AsyncMethodCallback<ByteBuffer> resultHandler) throws TException {
        iface.exportData(args.ids, args.key, args.token,resultHandler);
      }
    }

    public static class importData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, importData_args, ImportResult> {
      public importData() {
        super("importData");
      }

      public importData_args getEmptyArgsInstance() {
        return new importData_args();
      }

      public AsyncMethodCallback<ImportResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ImportResult>() { 
          public void onComplete(ImportResult o) {
            importData_result result = new importData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            importData_result result = new importData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, importData_args args, org.apache.thrift.async.AsyncMethodCallback<ImportResult> resultHandler) throws TException {
        iface.importData(args.dataToImport, args.key, args.token,resultHandler);
      }
    }

    public static class deleteObjectsByEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteObjectsByEvent_args, Void> {
      public deleteObjectsByEvent() {
        super("deleteObjectsByEvent");
      }

      public deleteObjectsByEvent_args getEmptyArgsInstance() {
        return new deleteObjectsByEvent_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteObjectsByEvent_result result = new deleteObjectsByEvent_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteObjectsByEvent_result result = new deleteObjectsByEvent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteObjectsByEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteObjectsByEvent(args.pipelineId, args.pipeId, args.status, args.eventText, args.token,resultHandler);
      }
    }

    public static class getPipelinesForUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPipelinesForUser_args, List<String>> {
      public getPipelinesForUser() {
        super("getPipelinesForUser");
      }

      public getPipelinesForUser_args getEmptyArgsInstance() {
        return new getPipelinesForUser_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getPipelinesForUser_result result = new getPipelinesForUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPipelinesForUser_result result = new getPipelinesForUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPipelinesForUser_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getPipelinesForUser(args.token,resultHandler);
      }
    }

  }

  public static class sendToQuarantine_args implements org.apache.thrift.TBase<sendToQuarantine_args, sendToQuarantine_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendToQuarantine_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendToQuarantine_args");

    private static final org.apache.thrift.protocol.TField QO_FIELD_DESC = new org.apache.thrift.protocol.TField("qo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ADDITIONAL_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("additionalMetadata", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendToQuarantine_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendToQuarantine_argsTupleSchemeFactory());
    }

    public QuarantinedObject qo; // required
    public String error; // required
    public AdditionalMetadata additionalMetadata; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QO((short)1, "qo"),
      ERROR((short)2, "error"),
      ADDITIONAL_METADATA((short)3, "additionalMetadata"),
      TOKEN((short)4, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QO
            return QO;
          case 2: // ERROR
            return ERROR;
          case 3: // ADDITIONAL_METADATA
            return ADDITIONAL_METADATA;
          case 4: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QO, new org.apache.thrift.meta_data.FieldMetaData("qo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QuarantinedObject.class)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ADDITIONAL_METADATA, new org.apache.thrift.meta_data.FieldMetaData("additionalMetadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdditionalMetadata.class)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendToQuarantine_args.class, metaDataMap);
    }

    public sendToQuarantine_args() {
    }

    public sendToQuarantine_args(
      QuarantinedObject qo,
      String error,
      AdditionalMetadata additionalMetadata,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.qo = qo;
      this.error = error;
      this.additionalMetadata = additionalMetadata;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendToQuarantine_args(sendToQuarantine_args other) {
      if (other.isSetQo()) {
        this.qo = new QuarantinedObject(other.qo);
      }
      if (other.isSetError()) {
        this.error = other.error;
      }
      if (other.isSetAdditionalMetadata()) {
        this.additionalMetadata = new AdditionalMetadata(other.additionalMetadata);
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public sendToQuarantine_args deepCopy() {
      return new sendToQuarantine_args(this);
    }

    @Override
    public void clear() {
      this.qo = null;
      this.error = null;
      this.additionalMetadata = null;
      this.token = null;
    }

    public QuarantinedObject getQo() {
      return this.qo;
    }

    public sendToQuarantine_args setQo(QuarantinedObject qo) {
      this.qo = qo;
      return this;
    }

    public void unsetQo() {
      this.qo = null;
    }

    /** Returns true if field qo is set (has been assigned a value) and false otherwise */
    public boolean isSetQo() {
      return this.qo != null;
    }

    public void setQoIsSet(boolean value) {
      if (!value) {
        this.qo = null;
      }
    }

    public String getError() {
      return this.error;
    }

    public sendToQuarantine_args setError(String error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public AdditionalMetadata getAdditionalMetadata() {
      return this.additionalMetadata;
    }

    public sendToQuarantine_args setAdditionalMetadata(AdditionalMetadata additionalMetadata) {
      this.additionalMetadata = additionalMetadata;
      return this;
    }

    public void unsetAdditionalMetadata() {
      this.additionalMetadata = null;
    }

    /** Returns true if field additionalMetadata is set (has been assigned a value) and false otherwise */
    public boolean isSetAdditionalMetadata() {
      return this.additionalMetadata != null;
    }

    public void setAdditionalMetadataIsSet(boolean value) {
      if (!value) {
        this.additionalMetadata = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public sendToQuarantine_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QO:
        if (value == null) {
          unsetQo();
        } else {
          setQo((QuarantinedObject)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((String)value);
        }
        break;

      case ADDITIONAL_METADATA:
        if (value == null) {
          unsetAdditionalMetadata();
        } else {
          setAdditionalMetadata((AdditionalMetadata)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QO:
        return getQo();

      case ERROR:
        return getError();

      case ADDITIONAL_METADATA:
        return getAdditionalMetadata();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QO:
        return isSetQo();
      case ERROR:
        return isSetError();
      case ADDITIONAL_METADATA:
        return isSetAdditionalMetadata();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendToQuarantine_args)
        return this.equals((sendToQuarantine_args)that);
      return false;
    }

    public boolean equals(sendToQuarantine_args that) {
      if (that == null)
        return false;

      boolean this_present_qo = true && this.isSetQo();
      boolean that_present_qo = true && that.isSetQo();
      if (this_present_qo || that_present_qo) {
        if (!(this_present_qo && that_present_qo))
          return false;
        if (!this.qo.equals(that.qo))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      boolean this_present_additionalMetadata = true && this.isSetAdditionalMetadata();
      boolean that_present_additionalMetadata = true && that.isSetAdditionalMetadata();
      if (this_present_additionalMetadata || that_present_additionalMetadata) {
        if (!(this_present_additionalMetadata && that_present_additionalMetadata))
          return false;
        if (!this.additionalMetadata.equals(that.additionalMetadata))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendToQuarantine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQo()).compareTo(other.isSetQo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qo, other.qo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAdditionalMetadata()).compareTo(other.isSetAdditionalMetadata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdditionalMetadata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.additionalMetadata, other.additionalMetadata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendToQuarantine_args(");
      boolean first = true;

      sb.append("qo:");
      if (this.qo == null) {
        sb.append("null");
      } else {
        sb.append(this.qo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("additionalMetadata:");
      if (this.additionalMetadata == null) {
        sb.append("null");
      } else {
        sb.append(this.additionalMetadata);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (qo != null) {
        qo.validate();
      }
      if (additionalMetadata != null) {
        additionalMetadata.validate();
      }
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendToQuarantine_argsStandardSchemeFactory implements SchemeFactory {
      public sendToQuarantine_argsStandardScheme getScheme() {
        return new sendToQuarantine_argsStandardScheme();
      }
    }

    private static class sendToQuarantine_argsStandardScheme extends StandardScheme<sendToQuarantine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendToQuarantine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qo = new QuarantinedObject();
                struct.qo.read(iprot);
                struct.setQoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.error = iprot.readString();
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ADDITIONAL_METADATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.additionalMetadata = new AdditionalMetadata();
                struct.additionalMetadata.read(iprot);
                struct.setAdditionalMetadataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendToQuarantine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.qo != null) {
          oprot.writeFieldBegin(QO_FIELD_DESC);
          struct.qo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          oprot.writeString(struct.error);
          oprot.writeFieldEnd();
        }
        if (struct.additionalMetadata != null) {
          oprot.writeFieldBegin(ADDITIONAL_METADATA_FIELD_DESC);
          struct.additionalMetadata.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendToQuarantine_argsTupleSchemeFactory implements SchemeFactory {
      public sendToQuarantine_argsTupleScheme getScheme() {
        return new sendToQuarantine_argsTupleScheme();
      }
    }

    private static class sendToQuarantine_argsTupleScheme extends TupleScheme<sendToQuarantine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendToQuarantine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQo()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        if (struct.isSetAdditionalMetadata()) {
          optionals.set(2);
        }
        if (struct.isSetToken()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetQo()) {
          struct.qo.write(oprot);
        }
        if (struct.isSetError()) {
          oprot.writeString(struct.error);
        }
        if (struct.isSetAdditionalMetadata()) {
          struct.additionalMetadata.write(oprot);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendToQuarantine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.qo = new QuarantinedObject();
          struct.qo.read(iprot);
          struct.setQoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = iprot.readString();
          struct.setErrorIsSet(true);
        }
        if (incoming.get(2)) {
          struct.additionalMetadata = new AdditionalMetadata();
          struct.additionalMetadata.read(iprot);
          struct.setAdditionalMetadataIsSet(true);
        }
        if (incoming.get(3)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class getObjectsForPipeline_args implements org.apache.thrift.TBase<getObjectsForPipeline_args, getObjectsForPipeline_args._Fields>, java.io.Serializable, Cloneable, Comparable<getObjectsForPipeline_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getObjectsForPipeline_args");

    private static final org.apache.thrift.protocol.TField PIPELINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipelineId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("statuses", org.apache.thrift.protocol.TType.SET, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNumber", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getObjectsForPipeline_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getObjectsForPipeline_argsTupleSchemeFactory());
    }

    public String pipelineId; // required
    public Set<ObjectStatus> statuses; // required
    public int pageNumber; // required
    public int pageSize; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PIPELINE_ID((short)1, "pipelineId"),
      STATUSES((short)2, "statuses"),
      PAGE_NUMBER((short)3, "pageNumber"),
      PAGE_SIZE((short)4, "pageSize"),
      TOKEN((short)5, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PIPELINE_ID
            return PIPELINE_ID;
          case 2: // STATUSES
            return STATUSES;
          case 3: // PAGE_NUMBER
            return PAGE_NUMBER;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          case 5: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUMBER_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PIPELINE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipelineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUSES, new org.apache.thrift.meta_data.FieldMetaData("statuses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ObjectStatus.class))));
      tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("pageNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getObjectsForPipeline_args.class, metaDataMap);
    }

    public getObjectsForPipeline_args() {
    }

    public getObjectsForPipeline_args(
      String pipelineId,
      Set<ObjectStatus> statuses,
      int pageNumber,
      int pageSize,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.pipelineId = pipelineId;
      this.statuses = statuses;
      this.pageNumber = pageNumber;
      setPageNumberIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getObjectsForPipeline_args(getObjectsForPipeline_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPipelineId()) {
        this.pipelineId = other.pipelineId;
      }
      if (other.isSetStatuses()) {
        Set<ObjectStatus> __this__statuses = new HashSet<ObjectStatus>(other.statuses.size());
        for (ObjectStatus other_element : other.statuses) {
          __this__statuses.add(other_element);
        }
        this.statuses = __this__statuses;
      }
      this.pageNumber = other.pageNumber;
      this.pageSize = other.pageSize;
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public getObjectsForPipeline_args deepCopy() {
      return new getObjectsForPipeline_args(this);
    }

    @Override
    public void clear() {
      this.pipelineId = null;
      this.statuses = null;
      setPageNumberIsSet(false);
      this.pageNumber = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      this.token = null;
    }

    public String getPipelineId() {
      return this.pipelineId;
    }

    public getObjectsForPipeline_args setPipelineId(String pipelineId) {
      this.pipelineId = pipelineId;
      return this;
    }

    public void unsetPipelineId() {
      this.pipelineId = null;
    }

    /** Returns true if field pipelineId is set (has been assigned a value) and false otherwise */
    public boolean isSetPipelineId() {
      return this.pipelineId != null;
    }

    public void setPipelineIdIsSet(boolean value) {
      if (!value) {
        this.pipelineId = null;
      }
    }

    public int getStatusesSize() {
      return (this.statuses == null) ? 0 : this.statuses.size();
    }

    public java.util.Iterator<ObjectStatus> getStatusesIterator() {
      return (this.statuses == null) ? null : this.statuses.iterator();
    }

    public void addToStatuses(ObjectStatus elem) {
      if (this.statuses == null) {
        this.statuses = new HashSet<ObjectStatus>();
      }
      this.statuses.add(elem);
    }

    public Set<ObjectStatus> getStatuses() {
      return this.statuses;
    }

    public getObjectsForPipeline_args setStatuses(Set<ObjectStatus> statuses) {
      this.statuses = statuses;
      return this;
    }

    public void unsetStatuses() {
      this.statuses = null;
    }

    /** Returns true if field statuses is set (has been assigned a value) and false otherwise */
    public boolean isSetStatuses() {
      return this.statuses != null;
    }

    public void setStatusesIsSet(boolean value) {
      if (!value) {
        this.statuses = null;
      }
    }

    public int getPageNumber() {
      return this.pageNumber;
    }

    public getObjectsForPipeline_args setPageNumber(int pageNumber) {
      this.pageNumber = pageNumber;
      setPageNumberIsSet(true);
      return this;
    }

    public void unsetPageNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUMBER_ISSET_ID);
    }

    /** Returns true if field pageNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUMBER_ISSET_ID);
    }

    public void setPageNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUMBER_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getObjectsForPipeline_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public getObjectsForPipeline_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PIPELINE_ID:
        if (value == null) {
          unsetPipelineId();
        } else {
          setPipelineId((String)value);
        }
        break;

      case STATUSES:
        if (value == null) {
          unsetStatuses();
        } else {
          setStatuses((Set<ObjectStatus>)value);
        }
        break;

      case PAGE_NUMBER:
        if (value == null) {
          unsetPageNumber();
        } else {
          setPageNumber((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PIPELINE_ID:
        return getPipelineId();

      case STATUSES:
        return getStatuses();

      case PAGE_NUMBER:
        return Integer.valueOf(getPageNumber());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PIPELINE_ID:
        return isSetPipelineId();
      case STATUSES:
        return isSetStatuses();
      case PAGE_NUMBER:
        return isSetPageNumber();
      case PAGE_SIZE:
        return isSetPageSize();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getObjectsForPipeline_args)
        return this.equals((getObjectsForPipeline_args)that);
      return false;
    }

    public boolean equals(getObjectsForPipeline_args that) {
      if (that == null)
        return false;

      boolean this_present_pipelineId = true && this.isSetPipelineId();
      boolean that_present_pipelineId = true && that.isSetPipelineId();
      if (this_present_pipelineId || that_present_pipelineId) {
        if (!(this_present_pipelineId && that_present_pipelineId))
          return false;
        if (!this.pipelineId.equals(that.pipelineId))
          return false;
      }

      boolean this_present_statuses = true && this.isSetStatuses();
      boolean that_present_statuses = true && that.isSetStatuses();
      if (this_present_statuses || that_present_statuses) {
        if (!(this_present_statuses && that_present_statuses))
          return false;
        if (!this.statuses.equals(that.statuses))
          return false;
      }

      boolean this_present_pageNumber = true;
      boolean that_present_pageNumber = true;
      if (this_present_pageNumber || that_present_pageNumber) {
        if (!(this_present_pageNumber && that_present_pageNumber))
          return false;
        if (this.pageNumber != that.pageNumber)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getObjectsForPipeline_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPipelineId()).compareTo(other.isSetPipelineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPipelineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipelineId, other.pipelineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatuses()).compareTo(other.isSetStatuses());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatuses()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statuses, other.statuses);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNumber()).compareTo(other.isSetPageNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNumber, other.pageNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getObjectsForPipeline_args(");
      boolean first = true;

      sb.append("pipelineId:");
      if (this.pipelineId == null) {
        sb.append("null");
      } else {
        sb.append(this.pipelineId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("statuses:");
      if (this.statuses == null) {
        sb.append("null");
      } else {
        sb.append(this.statuses);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNumber:");
      sb.append(this.pageNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getObjectsForPipeline_argsStandardSchemeFactory implements SchemeFactory {
      public getObjectsForPipeline_argsStandardScheme getScheme() {
        return new getObjectsForPipeline_argsStandardScheme();
      }
    }

    private static class getObjectsForPipeline_argsStandardScheme extends StandardScheme<getObjectsForPipeline_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getObjectsForPipeline_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PIPELINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pipelineId = iprot.readString();
                struct.setPipelineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUSES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set34 = iprot.readSetBegin();
                  struct.statuses = new HashSet<ObjectStatus>(2*_set34.size);
                  for (int _i35 = 0; _i35 < _set34.size; ++_i35)
                  {
                    ObjectStatus _elem36;
                    _elem36 = ObjectStatus.findByValue(iprot.readI32());
                    struct.statuses.add(_elem36);
                  }
                  iprot.readSetEnd();
                }
                struct.setStatusesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNumber = iprot.readI32();
                struct.setPageNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getObjectsForPipeline_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pipelineId != null) {
          oprot.writeFieldBegin(PIPELINE_ID_FIELD_DESC);
          oprot.writeString(struct.pipelineId);
          oprot.writeFieldEnd();
        }
        if (struct.statuses != null) {
          oprot.writeFieldBegin(STATUSES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.statuses.size()));
            for (ObjectStatus _iter37 : struct.statuses)
            {
              oprot.writeI32(_iter37.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.pageNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getObjectsForPipeline_argsTupleSchemeFactory implements SchemeFactory {
      public getObjectsForPipeline_argsTupleScheme getScheme() {
        return new getObjectsForPipeline_argsTupleScheme();
      }
    }

    private static class getObjectsForPipeline_argsTupleScheme extends TupleScheme<getObjectsForPipeline_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getObjectsForPipeline_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPipelineId()) {
          optionals.set(0);
        }
        if (struct.isSetStatuses()) {
          optionals.set(1);
        }
        if (struct.isSetPageNumber()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        if (struct.isSetToken()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetPipelineId()) {
          oprot.writeString(struct.pipelineId);
        }
        if (struct.isSetStatuses()) {
          {
            oprot.writeI32(struct.statuses.size());
            for (ObjectStatus _iter38 : struct.statuses)
            {
              oprot.writeI32(_iter38.getValue());
            }
          }
        }
        if (struct.isSetPageNumber()) {
          oprot.writeI32(struct.pageNumber);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getObjectsForPipeline_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.pipelineId = iprot.readString();
          struct.setPipelineIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set39 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.statuses = new HashSet<ObjectStatus>(2*_set39.size);
            for (int _i40 = 0; _i40 < _set39.size; ++_i40)
            {
              ObjectStatus _elem41;
              _elem41 = ObjectStatus.findByValue(iprot.readI32());
              struct.statuses.add(_elem41);
            }
          }
          struct.setStatusesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageNumber = iprot.readI32();
          struct.setPageNumberIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class getObjectsForPipeline_result implements org.apache.thrift.TBase<getObjectsForPipeline_result, getObjectsForPipeline_result._Fields>, java.io.Serializable, Cloneable, Comparable<getObjectsForPipeline_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getObjectsForPipeline_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getObjectsForPipeline_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getObjectsForPipeline_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public ObjectNotQuarantinedException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getObjectsForPipeline_result.class, metaDataMap);
    }

    public getObjectsForPipeline_result() {
    }

    public getObjectsForPipeline_result(
      List<String> success,
      ObjectNotQuarantinedException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getObjectsForPipeline_result(getObjectsForPipeline_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ObjectNotQuarantinedException(other.e);
      }
    }

    public getObjectsForPipeline_result deepCopy() {
      return new getObjectsForPipeline_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getObjectsForPipeline_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ObjectNotQuarantinedException getE() {
      return this.e;
    }

    public getObjectsForPipeline_result setE(ObjectNotQuarantinedException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ObjectNotQuarantinedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getObjectsForPipeline_result)
        return this.equals((getObjectsForPipeline_result)that);
      return false;
    }

    public boolean equals(getObjectsForPipeline_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getObjectsForPipeline_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getObjectsForPipeline_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getObjectsForPipeline_resultStandardSchemeFactory implements SchemeFactory {
      public getObjectsForPipeline_resultStandardScheme getScheme() {
        return new getObjectsForPipeline_resultStandardScheme();
      }
    }

    private static class getObjectsForPipeline_resultStandardScheme extends StandardScheme<getObjectsForPipeline_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getObjectsForPipeline_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list42.size);
                  for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                  {
                    String _elem44;
                    _elem44 = iprot.readString();
                    struct.success.add(_elem44);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ObjectNotQuarantinedException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getObjectsForPipeline_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter45 : struct.success)
            {
              oprot.writeString(_iter45);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getObjectsForPipeline_resultTupleSchemeFactory implements SchemeFactory {
      public getObjectsForPipeline_resultTupleScheme getScheme() {
        return new getObjectsForPipeline_resultTupleScheme();
      }
    }

    private static class getObjectsForPipeline_resultTupleScheme extends TupleScheme<getObjectsForPipeline_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getObjectsForPipeline_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter46 : struct.success)
            {
              oprot.writeString(_iter46);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getObjectsForPipeline_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list47.size);
            for (int _i48 = 0; _i48 < _list47.size; ++_i48)
            {
              String _elem49;
              _elem49 = iprot.readString();
              struct.success.add(_elem49);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ObjectNotQuarantinedException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getObjectCountPerPipe_args implements org.apache.thrift.TBase<getObjectCountPerPipe_args, getObjectCountPerPipe_args._Fields>, java.io.Serializable, Cloneable, Comparable<getObjectCountPerPipe_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getObjectCountPerPipe_args");

    private static final org.apache.thrift.protocol.TField PIPELINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipelineId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("statuses", org.apache.thrift.protocol.TType.SET, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getObjectCountPerPipe_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getObjectCountPerPipe_argsTupleSchemeFactory());
    }

    public String pipelineId; // required
    public Set<ObjectStatus> statuses; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PIPELINE_ID((short)1, "pipelineId"),
      STATUSES((short)2, "statuses"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PIPELINE_ID
            return PIPELINE_ID;
          case 2: // STATUSES
            return STATUSES;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PIPELINE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipelineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUSES, new org.apache.thrift.meta_data.FieldMetaData("statuses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ObjectStatus.class))));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getObjectCountPerPipe_args.class, metaDataMap);
    }

    public getObjectCountPerPipe_args() {
    }

    public getObjectCountPerPipe_args(
      String pipelineId,
      Set<ObjectStatus> statuses,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.pipelineId = pipelineId;
      this.statuses = statuses;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getObjectCountPerPipe_args(getObjectCountPerPipe_args other) {
      if (other.isSetPipelineId()) {
        this.pipelineId = other.pipelineId;
      }
      if (other.isSetStatuses()) {
        Set<ObjectStatus> __this__statuses = new HashSet<ObjectStatus>(other.statuses.size());
        for (ObjectStatus other_element : other.statuses) {
          __this__statuses.add(other_element);
        }
        this.statuses = __this__statuses;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public getObjectCountPerPipe_args deepCopy() {
      return new getObjectCountPerPipe_args(this);
    }

    @Override
    public void clear() {
      this.pipelineId = null;
      this.statuses = null;
      this.token = null;
    }

    public String getPipelineId() {
      return this.pipelineId;
    }

    public getObjectCountPerPipe_args setPipelineId(String pipelineId) {
      this.pipelineId = pipelineId;
      return this;
    }

    public void unsetPipelineId() {
      this.pipelineId = null;
    }

    /** Returns true if field pipelineId is set (has been assigned a value) and false otherwise */
    public boolean isSetPipelineId() {
      return this.pipelineId != null;
    }

    public void setPipelineIdIsSet(boolean value) {
      if (!value) {
        this.pipelineId = null;
      }
    }

    public int getStatusesSize() {
      return (this.statuses == null) ? 0 : this.statuses.size();
    }

    public java.util.Iterator<ObjectStatus> getStatusesIterator() {
      return (this.statuses == null) ? null : this.statuses.iterator();
    }

    public void addToStatuses(ObjectStatus elem) {
      if (this.statuses == null) {
        this.statuses = new HashSet<ObjectStatus>();
      }
      this.statuses.add(elem);
    }

    public Set<ObjectStatus> getStatuses() {
      return this.statuses;
    }

    public getObjectCountPerPipe_args setStatuses(Set<ObjectStatus> statuses) {
      this.statuses = statuses;
      return this;
    }

    public void unsetStatuses() {
      this.statuses = null;
    }

    /** Returns true if field statuses is set (has been assigned a value) and false otherwise */
    public boolean isSetStatuses() {
      return this.statuses != null;
    }

    public void setStatusesIsSet(boolean value) {
      if (!value) {
        this.statuses = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public getObjectCountPerPipe_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PIPELINE_ID:
        if (value == null) {
          unsetPipelineId();
        } else {
          setPipelineId((String)value);
        }
        break;

      case STATUSES:
        if (value == null) {
          unsetStatuses();
        } else {
          setStatuses((Set<ObjectStatus>)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PIPELINE_ID:
        return getPipelineId();

      case STATUSES:
        return getStatuses();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PIPELINE_ID:
        return isSetPipelineId();
      case STATUSES:
        return isSetStatuses();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getObjectCountPerPipe_args)
        return this.equals((getObjectCountPerPipe_args)that);
      return false;
    }

    public boolean equals(getObjectCountPerPipe_args that) {
      if (that == null)
        return false;

      boolean this_present_pipelineId = true && this.isSetPipelineId();
      boolean that_present_pipelineId = true && that.isSetPipelineId();
      if (this_present_pipelineId || that_present_pipelineId) {
        if (!(this_present_pipelineId && that_present_pipelineId))
          return false;
        if (!this.pipelineId.equals(that.pipelineId))
          return false;
      }

      boolean this_present_statuses = true && this.isSetStatuses();
      boolean that_present_statuses = true && that.isSetStatuses();
      if (this_present_statuses || that_present_statuses) {
        if (!(this_present_statuses && that_present_statuses))
          return false;
        if (!this.statuses.equals(that.statuses))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getObjectCountPerPipe_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPipelineId()).compareTo(other.isSetPipelineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPipelineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipelineId, other.pipelineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatuses()).compareTo(other.isSetStatuses());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatuses()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statuses, other.statuses);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getObjectCountPerPipe_args(");
      boolean first = true;

      sb.append("pipelineId:");
      if (this.pipelineId == null) {
        sb.append("null");
      } else {
        sb.append(this.pipelineId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("statuses:");
      if (this.statuses == null) {
        sb.append("null");
      } else {
        sb.append(this.statuses);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getObjectCountPerPipe_argsStandardSchemeFactory implements SchemeFactory {
      public getObjectCountPerPipe_argsStandardScheme getScheme() {
        return new getObjectCountPerPipe_argsStandardScheme();
      }
    }

    private static class getObjectCountPerPipe_argsStandardScheme extends StandardScheme<getObjectCountPerPipe_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getObjectCountPerPipe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PIPELINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pipelineId = iprot.readString();
                struct.setPipelineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUSES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set50 = iprot.readSetBegin();
                  struct.statuses = new HashSet<ObjectStatus>(2*_set50.size);
                  for (int _i51 = 0; _i51 < _set50.size; ++_i51)
                  {
                    ObjectStatus _elem52;
                    _elem52 = ObjectStatus.findByValue(iprot.readI32());
                    struct.statuses.add(_elem52);
                  }
                  iprot.readSetEnd();
                }
                struct.setStatusesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getObjectCountPerPipe_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pipelineId != null) {
          oprot.writeFieldBegin(PIPELINE_ID_FIELD_DESC);
          oprot.writeString(struct.pipelineId);
          oprot.writeFieldEnd();
        }
        if (struct.statuses != null) {
          oprot.writeFieldBegin(STATUSES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.statuses.size()));
            for (ObjectStatus _iter53 : struct.statuses)
            {
              oprot.writeI32(_iter53.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getObjectCountPerPipe_argsTupleSchemeFactory implements SchemeFactory {
      public getObjectCountPerPipe_argsTupleScheme getScheme() {
        return new getObjectCountPerPipe_argsTupleScheme();
      }
    }

    private static class getObjectCountPerPipe_argsTupleScheme extends TupleScheme<getObjectCountPerPipe_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getObjectCountPerPipe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPipelineId()) {
          optionals.set(0);
        }
        if (struct.isSetStatuses()) {
          optionals.set(1);
        }
        if (struct.isSetToken()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPipelineId()) {
          oprot.writeString(struct.pipelineId);
        }
        if (struct.isSetStatuses()) {
          {
            oprot.writeI32(struct.statuses.size());
            for (ObjectStatus _iter54 : struct.statuses)
            {
              oprot.writeI32(_iter54.getValue());
            }
          }
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getObjectCountPerPipe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.pipelineId = iprot.readString();
          struct.setPipelineIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set55 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.statuses = new HashSet<ObjectStatus>(2*_set55.size);
            for (int _i56 = 0; _i56 < _set55.size; ++_i56)
            {
              ObjectStatus _elem57;
              _elem57 = ObjectStatus.findByValue(iprot.readI32());
              struct.statuses.add(_elem57);
            }
          }
          struct.setStatusesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class getObjectCountPerPipe_result implements org.apache.thrift.TBase<getObjectCountPerPipe_result, getObjectCountPerPipe_result._Fields>, java.io.Serializable, Cloneable, Comparable<getObjectCountPerPipe_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getObjectCountPerPipe_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getObjectCountPerPipe_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getObjectCountPerPipe_resultTupleSchemeFactory());
    }

    public Set<EventWithCount> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EventWithCount.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getObjectCountPerPipe_result.class, metaDataMap);
    }

    public getObjectCountPerPipe_result() {
    }

    public getObjectCountPerPipe_result(
      Set<EventWithCount> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getObjectCountPerPipe_result(getObjectCountPerPipe_result other) {
      if (other.isSetSuccess()) {
        Set<EventWithCount> __this__success = new HashSet<EventWithCount>(other.success.size());
        for (EventWithCount other_element : other.success) {
          __this__success.add(new EventWithCount(other_element));
        }
        this.success = __this__success;
      }
    }

    public getObjectCountPerPipe_result deepCopy() {
      return new getObjectCountPerPipe_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<EventWithCount> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(EventWithCount elem) {
      if (this.success == null) {
        this.success = new HashSet<EventWithCount>();
      }
      this.success.add(elem);
    }

    public Set<EventWithCount> getSuccess() {
      return this.success;
    }

    public getObjectCountPerPipe_result setSuccess(Set<EventWithCount> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<EventWithCount>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getObjectCountPerPipe_result)
        return this.equals((getObjectCountPerPipe_result)that);
      return false;
    }

    public boolean equals(getObjectCountPerPipe_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getObjectCountPerPipe_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getObjectCountPerPipe_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getObjectCountPerPipe_resultStandardSchemeFactory implements SchemeFactory {
      public getObjectCountPerPipe_resultStandardScheme getScheme() {
        return new getObjectCountPerPipe_resultStandardScheme();
      }
    }

    private static class getObjectCountPerPipe_resultStandardScheme extends StandardScheme<getObjectCountPerPipe_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getObjectCountPerPipe_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set58 = iprot.readSetBegin();
                  struct.success = new HashSet<EventWithCount>(2*_set58.size);
                  for (int _i59 = 0; _i59 < _set58.size; ++_i59)
                  {
                    EventWithCount _elem60;
                    _elem60 = new EventWithCount();
                    _elem60.read(iprot);
                    struct.success.add(_elem60);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getObjectCountPerPipe_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (EventWithCount _iter61 : struct.success)
            {
              _iter61.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getObjectCountPerPipe_resultTupleSchemeFactory implements SchemeFactory {
      public getObjectCountPerPipe_resultTupleScheme getScheme() {
        return new getObjectCountPerPipe_resultTupleScheme();
      }
    }

    private static class getObjectCountPerPipe_resultTupleScheme extends TupleScheme<getObjectCountPerPipe_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getObjectCountPerPipe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (EventWithCount _iter62 : struct.success)
            {
              _iter62.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getObjectCountPerPipe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set63 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashSet<EventWithCount>(2*_set63.size);
            for (int _i64 = 0; _i64 < _set63.size; ++_i64)
            {
              EventWithCount _elem65;
              _elem65 = new EventWithCount();
              _elem65.read(iprot);
              struct.success.add(_elem65);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLatestEventForPipeline_args implements org.apache.thrift.TBase<getLatestEventForPipeline_args, getLatestEventForPipeline_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestEventForPipeline_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestEventForPipeline_args");

    private static final org.apache.thrift.protocol.TField PIPELINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipelineId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("statuses", org.apache.thrift.protocol.TType.SET, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLatestEventForPipeline_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLatestEventForPipeline_argsTupleSchemeFactory());
    }

    public String pipelineId; // required
    public Set<ObjectStatus> statuses; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PIPELINE_ID((short)1, "pipelineId"),
      STATUSES((short)2, "statuses"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PIPELINE_ID
            return PIPELINE_ID;
          case 2: // STATUSES
            return STATUSES;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PIPELINE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipelineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUSES, new org.apache.thrift.meta_data.FieldMetaData("statuses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ObjectStatus.class))));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestEventForPipeline_args.class, metaDataMap);
    }

    public getLatestEventForPipeline_args() {
    }

    public getLatestEventForPipeline_args(
      String pipelineId,
      Set<ObjectStatus> statuses,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.pipelineId = pipelineId;
      this.statuses = statuses;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestEventForPipeline_args(getLatestEventForPipeline_args other) {
      if (other.isSetPipelineId()) {
        this.pipelineId = other.pipelineId;
      }
      if (other.isSetStatuses()) {
        Set<ObjectStatus> __this__statuses = new HashSet<ObjectStatus>(other.statuses.size());
        for (ObjectStatus other_element : other.statuses) {
          __this__statuses.add(other_element);
        }
        this.statuses = __this__statuses;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public getLatestEventForPipeline_args deepCopy() {
      return new getLatestEventForPipeline_args(this);
    }

    @Override
    public void clear() {
      this.pipelineId = null;
      this.statuses = null;
      this.token = null;
    }

    public String getPipelineId() {
      return this.pipelineId;
    }

    public getLatestEventForPipeline_args setPipelineId(String pipelineId) {
      this.pipelineId = pipelineId;
      return this;
    }

    public void unsetPipelineId() {
      this.pipelineId = null;
    }

    /** Returns true if field pipelineId is set (has been assigned a value) and false otherwise */
    public boolean isSetPipelineId() {
      return this.pipelineId != null;
    }

    public void setPipelineIdIsSet(boolean value) {
      if (!value) {
        this.pipelineId = null;
      }
    }

    public int getStatusesSize() {
      return (this.statuses == null) ? 0 : this.statuses.size();
    }

    public java.util.Iterator<ObjectStatus> getStatusesIterator() {
      return (this.statuses == null) ? null : this.statuses.iterator();
    }

    public void addToStatuses(ObjectStatus elem) {
      if (this.statuses == null) {
        this.statuses = new HashSet<ObjectStatus>();
      }
      this.statuses.add(elem);
    }

    public Set<ObjectStatus> getStatuses() {
      return this.statuses;
    }

    public getLatestEventForPipeline_args setStatuses(Set<ObjectStatus> statuses) {
      this.statuses = statuses;
      return this;
    }

    public void unsetStatuses() {
      this.statuses = null;
    }

    /** Returns true if field statuses is set (has been assigned a value) and false otherwise */
    public boolean isSetStatuses() {
      return this.statuses != null;
    }

    public void setStatusesIsSet(boolean value) {
      if (!value) {
        this.statuses = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public getLatestEventForPipeline_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PIPELINE_ID:
        if (value == null) {
          unsetPipelineId();
        } else {
          setPipelineId((String)value);
        }
        break;

      case STATUSES:
        if (value == null) {
          unsetStatuses();
        } else {
          setStatuses((Set<ObjectStatus>)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PIPELINE_ID:
        return getPipelineId();

      case STATUSES:
        return getStatuses();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PIPELINE_ID:
        return isSetPipelineId();
      case STATUSES:
        return isSetStatuses();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestEventForPipeline_args)
        return this.equals((getLatestEventForPipeline_args)that);
      return false;
    }

    public boolean equals(getLatestEventForPipeline_args that) {
      if (that == null)
        return false;

      boolean this_present_pipelineId = true && this.isSetPipelineId();
      boolean that_present_pipelineId = true && that.isSetPipelineId();
      if (this_present_pipelineId || that_present_pipelineId) {
        if (!(this_present_pipelineId && that_present_pipelineId))
          return false;
        if (!this.pipelineId.equals(that.pipelineId))
          return false;
      }

      boolean this_present_statuses = true && this.isSetStatuses();
      boolean that_present_statuses = true && that.isSetStatuses();
      if (this_present_statuses || that_present_statuses) {
        if (!(this_present_statuses && that_present_statuses))
          return false;
        if (!this.statuses.equals(that.statuses))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLatestEventForPipeline_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPipelineId()).compareTo(other.isSetPipelineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPipelineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipelineId, other.pipelineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatuses()).compareTo(other.isSetStatuses());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatuses()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statuses, other.statuses);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestEventForPipeline_args(");
      boolean first = true;

      sb.append("pipelineId:");
      if (this.pipelineId == null) {
        sb.append("null");
      } else {
        sb.append(this.pipelineId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("statuses:");
      if (this.statuses == null) {
        sb.append("null");
      } else {
        sb.append(this.statuses);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestEventForPipeline_argsStandardSchemeFactory implements SchemeFactory {
      public getLatestEventForPipeline_argsStandardScheme getScheme() {
        return new getLatestEventForPipeline_argsStandardScheme();
      }
    }

    private static class getLatestEventForPipeline_argsStandardScheme extends StandardScheme<getLatestEventForPipeline_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestEventForPipeline_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PIPELINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pipelineId = iprot.readString();
                struct.setPipelineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUSES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set66 = iprot.readSetBegin();
                  struct.statuses = new HashSet<ObjectStatus>(2*_set66.size);
                  for (int _i67 = 0; _i67 < _set66.size; ++_i67)
                  {
                    ObjectStatus _elem68;
                    _elem68 = ObjectStatus.findByValue(iprot.readI32());
                    struct.statuses.add(_elem68);
                  }
                  iprot.readSetEnd();
                }
                struct.setStatusesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestEventForPipeline_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pipelineId != null) {
          oprot.writeFieldBegin(PIPELINE_ID_FIELD_DESC);
          oprot.writeString(struct.pipelineId);
          oprot.writeFieldEnd();
        }
        if (struct.statuses != null) {
          oprot.writeFieldBegin(STATUSES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.statuses.size()));
            for (ObjectStatus _iter69 : struct.statuses)
            {
              oprot.writeI32(_iter69.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestEventForPipeline_argsTupleSchemeFactory implements SchemeFactory {
      public getLatestEventForPipeline_argsTupleScheme getScheme() {
        return new getLatestEventForPipeline_argsTupleScheme();
      }
    }

    private static class getLatestEventForPipeline_argsTupleScheme extends TupleScheme<getLatestEventForPipeline_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestEventForPipeline_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPipelineId()) {
          optionals.set(0);
        }
        if (struct.isSetStatuses()) {
          optionals.set(1);
        }
        if (struct.isSetToken()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPipelineId()) {
          oprot.writeString(struct.pipelineId);
        }
        if (struct.isSetStatuses()) {
          {
            oprot.writeI32(struct.statuses.size());
            for (ObjectStatus _iter70 : struct.statuses)
            {
              oprot.writeI32(_iter70.getValue());
            }
          }
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestEventForPipeline_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.pipelineId = iprot.readString();
          struct.setPipelineIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set71 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.statuses = new HashSet<ObjectStatus>(2*_set71.size);
            for (int _i72 = 0; _i72 < _set71.size; ++_i72)
            {
              ObjectStatus _elem73;
              _elem73 = ObjectStatus.findByValue(iprot.readI32());
              struct.statuses.add(_elem73);
            }
          }
          struct.setStatusesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class getLatestEventForPipeline_result implements org.apache.thrift.TBase<getLatestEventForPipeline_result, getLatestEventForPipeline_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestEventForPipeline_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestEventForPipeline_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLatestEventForPipeline_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLatestEventForPipeline_resultTupleSchemeFactory());
    }

    public EventWithCount success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EventWithCount.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestEventForPipeline_result.class, metaDataMap);
    }

    public getLatestEventForPipeline_result() {
    }

    public getLatestEventForPipeline_result(
      EventWithCount success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestEventForPipeline_result(getLatestEventForPipeline_result other) {
      if (other.isSetSuccess()) {
        this.success = new EventWithCount(other.success);
      }
    }

    public getLatestEventForPipeline_result deepCopy() {
      return new getLatestEventForPipeline_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public EventWithCount getSuccess() {
      return this.success;
    }

    public getLatestEventForPipeline_result setSuccess(EventWithCount success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((EventWithCount)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestEventForPipeline_result)
        return this.equals((getLatestEventForPipeline_result)that);
      return false;
    }

    public boolean equals(getLatestEventForPipeline_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLatestEventForPipeline_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestEventForPipeline_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestEventForPipeline_resultStandardSchemeFactory implements SchemeFactory {
      public getLatestEventForPipeline_resultStandardScheme getScheme() {
        return new getLatestEventForPipeline_resultStandardScheme();
      }
    }

    private static class getLatestEventForPipeline_resultStandardScheme extends StandardScheme<getLatestEventForPipeline_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestEventForPipeline_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new EventWithCount();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestEventForPipeline_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestEventForPipeline_resultTupleSchemeFactory implements SchemeFactory {
      public getLatestEventForPipeline_resultTupleScheme getScheme() {
        return new getLatestEventForPipeline_resultTupleScheme();
      }
    }

    private static class getLatestEventForPipeline_resultTupleScheme extends TupleScheme<getLatestEventForPipeline_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestEventForPipeline_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestEventForPipeline_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new EventWithCount();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLatestEventForPipe_args implements org.apache.thrift.TBase<getLatestEventForPipe_args, getLatestEventForPipe_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestEventForPipe_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestEventForPipe_args");

    private static final org.apache.thrift.protocol.TField PIPELINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipelineId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PIPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipeId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("statuses", org.apache.thrift.protocol.TType.SET, (short)3);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLatestEventForPipe_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLatestEventForPipe_argsTupleSchemeFactory());
    }

    public String pipelineId; // required
    public String pipeId; // required
    public Set<ObjectStatus> statuses; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PIPELINE_ID((short)1, "pipelineId"),
      PIPE_ID((short)2, "pipeId"),
      STATUSES((short)3, "statuses"),
      TOKEN((short)4, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PIPELINE_ID
            return PIPELINE_ID;
          case 2: // PIPE_ID
            return PIPE_ID;
          case 3: // STATUSES
            return STATUSES;
          case 4: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PIPELINE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipelineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PIPE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUSES, new org.apache.thrift.meta_data.FieldMetaData("statuses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ObjectStatus.class))));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestEventForPipe_args.class, metaDataMap);
    }

    public getLatestEventForPipe_args() {
    }

    public getLatestEventForPipe_args(
      String pipelineId,
      String pipeId,
      Set<ObjectStatus> statuses,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.pipelineId = pipelineId;
      this.pipeId = pipeId;
      this.statuses = statuses;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestEventForPipe_args(getLatestEventForPipe_args other) {
      if (other.isSetPipelineId()) {
        this.pipelineId = other.pipelineId;
      }
      if (other.isSetPipeId()) {
        this.pipeId = other.pipeId;
      }
      if (other.isSetStatuses()) {
        Set<ObjectStatus> __this__statuses = new HashSet<ObjectStatus>(other.statuses.size());
        for (ObjectStatus other_element : other.statuses) {
          __this__statuses.add(other_element);
        }
        this.statuses = __this__statuses;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public getLatestEventForPipe_args deepCopy() {
      return new getLatestEventForPipe_args(this);
    }

    @Override
    public void clear() {
      this.pipelineId = null;
      this.pipeId = null;
      this.statuses = null;
      this.token = null;
    }

    public String getPipelineId() {
      return this.pipelineId;
    }

    public getLatestEventForPipe_args setPipelineId(String pipelineId) {
      this.pipelineId = pipelineId;
      return this;
    }

    public void unsetPipelineId() {
      this.pipelineId = null;
    }

    /** Returns true if field pipelineId is set (has been assigned a value) and false otherwise */
    public boolean isSetPipelineId() {
      return this.pipelineId != null;
    }

    public void setPipelineIdIsSet(boolean value) {
      if (!value) {
        this.pipelineId = null;
      }
    }

    public String getPipeId() {
      return this.pipeId;
    }

    public getLatestEventForPipe_args setPipeId(String pipeId) {
      this.pipeId = pipeId;
      return this;
    }

    public void unsetPipeId() {
      this.pipeId = null;
    }

    /** Returns true if field pipeId is set (has been assigned a value) and false otherwise */
    public boolean isSetPipeId() {
      return this.pipeId != null;
    }

    public void setPipeIdIsSet(boolean value) {
      if (!value) {
        this.pipeId = null;
      }
    }

    public int getStatusesSize() {
      return (this.statuses == null) ? 0 : this.statuses.size();
    }

    public java.util.Iterator<ObjectStatus> getStatusesIterator() {
      return (this.statuses == null) ? null : this.statuses.iterator();
    }

    public void addToStatuses(ObjectStatus elem) {
      if (this.statuses == null) {
        this.statuses = new HashSet<ObjectStatus>();
      }
      this.statuses.add(elem);
    }

    public Set<ObjectStatus> getStatuses() {
      return this.statuses;
    }

    public getLatestEventForPipe_args setStatuses(Set<ObjectStatus> statuses) {
      this.statuses = statuses;
      return this;
    }

    public void unsetStatuses() {
      this.statuses = null;
    }

    /** Returns true if field statuses is set (has been assigned a value) and false otherwise */
    public boolean isSetStatuses() {
      return this.statuses != null;
    }

    public void setStatusesIsSet(boolean value) {
      if (!value) {
        this.statuses = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public getLatestEventForPipe_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PIPELINE_ID:
        if (value == null) {
          unsetPipelineId();
        } else {
          setPipelineId((String)value);
        }
        break;

      case PIPE_ID:
        if (value == null) {
          unsetPipeId();
        } else {
          setPipeId((String)value);
        }
        break;

      case STATUSES:
        if (value == null) {
          unsetStatuses();
        } else {
          setStatuses((Set<ObjectStatus>)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PIPELINE_ID:
        return getPipelineId();

      case PIPE_ID:
        return getPipeId();

      case STATUSES:
        return getStatuses();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PIPELINE_ID:
        return isSetPipelineId();
      case PIPE_ID:
        return isSetPipeId();
      case STATUSES:
        return isSetStatuses();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestEventForPipe_args)
        return this.equals((getLatestEventForPipe_args)that);
      return false;
    }

    public boolean equals(getLatestEventForPipe_args that) {
      if (that == null)
        return false;

      boolean this_present_pipelineId = true && this.isSetPipelineId();
      boolean that_present_pipelineId = true && that.isSetPipelineId();
      if (this_present_pipelineId || that_present_pipelineId) {
        if (!(this_present_pipelineId && that_present_pipelineId))
          return false;
        if (!this.pipelineId.equals(that.pipelineId))
          return false;
      }

      boolean this_present_pipeId = true && this.isSetPipeId();
      boolean that_present_pipeId = true && that.isSetPipeId();
      if (this_present_pipeId || that_present_pipeId) {
        if (!(this_present_pipeId && that_present_pipeId))
          return false;
        if (!this.pipeId.equals(that.pipeId))
          return false;
      }

      boolean this_present_statuses = true && this.isSetStatuses();
      boolean that_present_statuses = true && that.isSetStatuses();
      if (this_present_statuses || that_present_statuses) {
        if (!(this_present_statuses && that_present_statuses))
          return false;
        if (!this.statuses.equals(that.statuses))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLatestEventForPipe_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPipelineId()).compareTo(other.isSetPipelineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPipelineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipelineId, other.pipelineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPipeId()).compareTo(other.isSetPipeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPipeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipeId, other.pipeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatuses()).compareTo(other.isSetStatuses());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatuses()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statuses, other.statuses);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestEventForPipe_args(");
      boolean first = true;

      sb.append("pipelineId:");
      if (this.pipelineId == null) {
        sb.append("null");
      } else {
        sb.append(this.pipelineId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pipeId:");
      if (this.pipeId == null) {
        sb.append("null");
      } else {
        sb.append(this.pipeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("statuses:");
      if (this.statuses == null) {
        sb.append("null");
      } else {
        sb.append(this.statuses);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestEventForPipe_argsStandardSchemeFactory implements SchemeFactory {
      public getLatestEventForPipe_argsStandardScheme getScheme() {
        return new getLatestEventForPipe_argsStandardScheme();
      }
    }

    private static class getLatestEventForPipe_argsStandardScheme extends StandardScheme<getLatestEventForPipe_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestEventForPipe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PIPELINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pipelineId = iprot.readString();
                struct.setPipelineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PIPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pipeId = iprot.readString();
                struct.setPipeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATUSES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set74 = iprot.readSetBegin();
                  struct.statuses = new HashSet<ObjectStatus>(2*_set74.size);
                  for (int _i75 = 0; _i75 < _set74.size; ++_i75)
                  {
                    ObjectStatus _elem76;
                    _elem76 = ObjectStatus.findByValue(iprot.readI32());
                    struct.statuses.add(_elem76);
                  }
                  iprot.readSetEnd();
                }
                struct.setStatusesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestEventForPipe_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pipelineId != null) {
          oprot.writeFieldBegin(PIPELINE_ID_FIELD_DESC);
          oprot.writeString(struct.pipelineId);
          oprot.writeFieldEnd();
        }
        if (struct.pipeId != null) {
          oprot.writeFieldBegin(PIPE_ID_FIELD_DESC);
          oprot.writeString(struct.pipeId);
          oprot.writeFieldEnd();
        }
        if (struct.statuses != null) {
          oprot.writeFieldBegin(STATUSES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.statuses.size()));
            for (ObjectStatus _iter77 : struct.statuses)
            {
              oprot.writeI32(_iter77.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestEventForPipe_argsTupleSchemeFactory implements SchemeFactory {
      public getLatestEventForPipe_argsTupleScheme getScheme() {
        return new getLatestEventForPipe_argsTupleScheme();
      }
    }

    private static class getLatestEventForPipe_argsTupleScheme extends TupleScheme<getLatestEventForPipe_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestEventForPipe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPipelineId()) {
          optionals.set(0);
        }
        if (struct.isSetPipeId()) {
          optionals.set(1);
        }
        if (struct.isSetStatuses()) {
          optionals.set(2);
        }
        if (struct.isSetToken()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPipelineId()) {
          oprot.writeString(struct.pipelineId);
        }
        if (struct.isSetPipeId()) {
          oprot.writeString(struct.pipeId);
        }
        if (struct.isSetStatuses()) {
          {
            oprot.writeI32(struct.statuses.size());
            for (ObjectStatus _iter78 : struct.statuses)
            {
              oprot.writeI32(_iter78.getValue());
            }
          }
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestEventForPipe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.pipelineId = iprot.readString();
          struct.setPipelineIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pipeId = iprot.readString();
          struct.setPipeIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TSet _set79 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.statuses = new HashSet<ObjectStatus>(2*_set79.size);
            for (int _i80 = 0; _i80 < _set79.size; ++_i80)
            {
              ObjectStatus _elem81;
              _elem81 = ObjectStatus.findByValue(iprot.readI32());
              struct.statuses.add(_elem81);
            }
          }
          struct.setStatusesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class getLatestEventForPipe_result implements org.apache.thrift.TBase<getLatestEventForPipe_result, getLatestEventForPipe_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestEventForPipe_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestEventForPipe_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLatestEventForPipe_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLatestEventForPipe_resultTupleSchemeFactory());
    }

    public QuarantineEvent success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QuarantineEvent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestEventForPipe_result.class, metaDataMap);
    }

    public getLatestEventForPipe_result() {
    }

    public getLatestEventForPipe_result(
      QuarantineEvent success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestEventForPipe_result(getLatestEventForPipe_result other) {
      if (other.isSetSuccess()) {
        this.success = new QuarantineEvent(other.success);
      }
    }

    public getLatestEventForPipe_result deepCopy() {
      return new getLatestEventForPipe_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public QuarantineEvent getSuccess() {
      return this.success;
    }

    public getLatestEventForPipe_result setSuccess(QuarantineEvent success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((QuarantineEvent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestEventForPipe_result)
        return this.equals((getLatestEventForPipe_result)that);
      return false;
    }

    public boolean equals(getLatestEventForPipe_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLatestEventForPipe_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestEventForPipe_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestEventForPipe_resultStandardSchemeFactory implements SchemeFactory {
      public getLatestEventForPipe_resultStandardScheme getScheme() {
        return new getLatestEventForPipe_resultStandardScheme();
      }
    }

    private static class getLatestEventForPipe_resultStandardScheme extends StandardScheme<getLatestEventForPipe_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestEventForPipe_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new QuarantineEvent();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestEventForPipe_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestEventForPipe_resultTupleSchemeFactory implements SchemeFactory {
      public getLatestEventForPipe_resultTupleScheme getScheme() {
        return new getLatestEventForPipe_resultTupleScheme();
      }
    }

    private static class getLatestEventForPipe_resultTupleScheme extends TupleScheme<getLatestEventForPipe_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestEventForPipe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestEventForPipe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new QuarantineEvent();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEventCountPerPipe_args implements org.apache.thrift.TBase<getEventCountPerPipe_args, getEventCountPerPipe_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEventCountPerPipe_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEventCountPerPipe_args");

    private static final org.apache.thrift.protocol.TField PIPELINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipelineId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PIPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipeId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("statuses", org.apache.thrift.protocol.TType.SET, (short)3);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEventCountPerPipe_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEventCountPerPipe_argsTupleSchemeFactory());
    }

    public String pipelineId; // required
    public String pipeId; // required
    public Set<ObjectStatus> statuses; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PIPELINE_ID((short)1, "pipelineId"),
      PIPE_ID((short)2, "pipeId"),
      STATUSES((short)3, "statuses"),
      TOKEN((short)4, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PIPELINE_ID
            return PIPELINE_ID;
          case 2: // PIPE_ID
            return PIPE_ID;
          case 3: // STATUSES
            return STATUSES;
          case 4: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PIPELINE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipelineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PIPE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUSES, new org.apache.thrift.meta_data.FieldMetaData("statuses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ObjectStatus.class))));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEventCountPerPipe_args.class, metaDataMap);
    }

    public getEventCountPerPipe_args() {
    }

    public getEventCountPerPipe_args(
      String pipelineId,
      String pipeId,
      Set<ObjectStatus> statuses,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.pipelineId = pipelineId;
      this.pipeId = pipeId;
      this.statuses = statuses;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventCountPerPipe_args(getEventCountPerPipe_args other) {
      if (other.isSetPipelineId()) {
        this.pipelineId = other.pipelineId;
      }
      if (other.isSetPipeId()) {
        this.pipeId = other.pipeId;
      }
      if (other.isSetStatuses()) {
        Set<ObjectStatus> __this__statuses = new HashSet<ObjectStatus>(other.statuses.size());
        for (ObjectStatus other_element : other.statuses) {
          __this__statuses.add(other_element);
        }
        this.statuses = __this__statuses;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public getEventCountPerPipe_args deepCopy() {
      return new getEventCountPerPipe_args(this);
    }

    @Override
    public void clear() {
      this.pipelineId = null;
      this.pipeId = null;
      this.statuses = null;
      this.token = null;
    }

    public String getPipelineId() {
      return this.pipelineId;
    }

    public getEventCountPerPipe_args setPipelineId(String pipelineId) {
      this.pipelineId = pipelineId;
      return this;
    }

    public void unsetPipelineId() {
      this.pipelineId = null;
    }

    /** Returns true if field pipelineId is set (has been assigned a value) and false otherwise */
    public boolean isSetPipelineId() {
      return this.pipelineId != null;
    }

    public void setPipelineIdIsSet(boolean value) {
      if (!value) {
        this.pipelineId = null;
      }
    }

    public String getPipeId() {
      return this.pipeId;
    }

    public getEventCountPerPipe_args setPipeId(String pipeId) {
      this.pipeId = pipeId;
      return this;
    }

    public void unsetPipeId() {
      this.pipeId = null;
    }

    /** Returns true if field pipeId is set (has been assigned a value) and false otherwise */
    public boolean isSetPipeId() {
      return this.pipeId != null;
    }

    public void setPipeIdIsSet(boolean value) {
      if (!value) {
        this.pipeId = null;
      }
    }

    public int getStatusesSize() {
      return (this.statuses == null) ? 0 : this.statuses.size();
    }

    public java.util.Iterator<ObjectStatus> getStatusesIterator() {
      return (this.statuses == null) ? null : this.statuses.iterator();
    }

    public void addToStatuses(ObjectStatus elem) {
      if (this.statuses == null) {
        this.statuses = new HashSet<ObjectStatus>();
      }
      this.statuses.add(elem);
    }

    public Set<ObjectStatus> getStatuses() {
      return this.statuses;
    }

    public getEventCountPerPipe_args setStatuses(Set<ObjectStatus> statuses) {
      this.statuses = statuses;
      return this;
    }

    public void unsetStatuses() {
      this.statuses = null;
    }

    /** Returns true if field statuses is set (has been assigned a value) and false otherwise */
    public boolean isSetStatuses() {
      return this.statuses != null;
    }

    public void setStatusesIsSet(boolean value) {
      if (!value) {
        this.statuses = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public getEventCountPerPipe_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PIPELINE_ID:
        if (value == null) {
          unsetPipelineId();
        } else {
          setPipelineId((String)value);
        }
        break;

      case PIPE_ID:
        if (value == null) {
          unsetPipeId();
        } else {
          setPipeId((String)value);
        }
        break;

      case STATUSES:
        if (value == null) {
          unsetStatuses();
        } else {
          setStatuses((Set<ObjectStatus>)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PIPELINE_ID:
        return getPipelineId();

      case PIPE_ID:
        return getPipeId();

      case STATUSES:
        return getStatuses();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PIPELINE_ID:
        return isSetPipelineId();
      case PIPE_ID:
        return isSetPipeId();
      case STATUSES:
        return isSetStatuses();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventCountPerPipe_args)
        return this.equals((getEventCountPerPipe_args)that);
      return false;
    }

    public boolean equals(getEventCountPerPipe_args that) {
      if (that == null)
        return false;

      boolean this_present_pipelineId = true && this.isSetPipelineId();
      boolean that_present_pipelineId = true && that.isSetPipelineId();
      if (this_present_pipelineId || that_present_pipelineId) {
        if (!(this_present_pipelineId && that_present_pipelineId))
          return false;
        if (!this.pipelineId.equals(that.pipelineId))
          return false;
      }

      boolean this_present_pipeId = true && this.isSetPipeId();
      boolean that_present_pipeId = true && that.isSetPipeId();
      if (this_present_pipeId || that_present_pipeId) {
        if (!(this_present_pipeId && that_present_pipeId))
          return false;
        if (!this.pipeId.equals(that.pipeId))
          return false;
      }

      boolean this_present_statuses = true && this.isSetStatuses();
      boolean that_present_statuses = true && that.isSetStatuses();
      if (this_present_statuses || that_present_statuses) {
        if (!(this_present_statuses && that_present_statuses))
          return false;
        if (!this.statuses.equals(that.statuses))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getEventCountPerPipe_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPipelineId()).compareTo(other.isSetPipelineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPipelineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipelineId, other.pipelineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPipeId()).compareTo(other.isSetPipeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPipeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipeId, other.pipeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatuses()).compareTo(other.isSetStatuses());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatuses()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statuses, other.statuses);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEventCountPerPipe_args(");
      boolean first = true;

      sb.append("pipelineId:");
      if (this.pipelineId == null) {
        sb.append("null");
      } else {
        sb.append(this.pipelineId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pipeId:");
      if (this.pipeId == null) {
        sb.append("null");
      } else {
        sb.append(this.pipeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("statuses:");
      if (this.statuses == null) {
        sb.append("null");
      } else {
        sb.append(this.statuses);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEventCountPerPipe_argsStandardSchemeFactory implements SchemeFactory {
      public getEventCountPerPipe_argsStandardScheme getScheme() {
        return new getEventCountPerPipe_argsStandardScheme();
      }
    }

    private static class getEventCountPerPipe_argsStandardScheme extends StandardScheme<getEventCountPerPipe_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEventCountPerPipe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PIPELINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pipelineId = iprot.readString();
                struct.setPipelineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PIPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pipeId = iprot.readString();
                struct.setPipeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATUSES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set82 = iprot.readSetBegin();
                  struct.statuses = new HashSet<ObjectStatus>(2*_set82.size);
                  for (int _i83 = 0; _i83 < _set82.size; ++_i83)
                  {
                    ObjectStatus _elem84;
                    _elem84 = ObjectStatus.findByValue(iprot.readI32());
                    struct.statuses.add(_elem84);
                  }
                  iprot.readSetEnd();
                }
                struct.setStatusesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEventCountPerPipe_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pipelineId != null) {
          oprot.writeFieldBegin(PIPELINE_ID_FIELD_DESC);
          oprot.writeString(struct.pipelineId);
          oprot.writeFieldEnd();
        }
        if (struct.pipeId != null) {
          oprot.writeFieldBegin(PIPE_ID_FIELD_DESC);
          oprot.writeString(struct.pipeId);
          oprot.writeFieldEnd();
        }
        if (struct.statuses != null) {
          oprot.writeFieldBegin(STATUSES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.statuses.size()));
            for (ObjectStatus _iter85 : struct.statuses)
            {
              oprot.writeI32(_iter85.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEventCountPerPipe_argsTupleSchemeFactory implements SchemeFactory {
      public getEventCountPerPipe_argsTupleScheme getScheme() {
        return new getEventCountPerPipe_argsTupleScheme();
      }
    }

    private static class getEventCountPerPipe_argsTupleScheme extends TupleScheme<getEventCountPerPipe_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEventCountPerPipe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPipelineId()) {
          optionals.set(0);
        }
        if (struct.isSetPipeId()) {
          optionals.set(1);
        }
        if (struct.isSetStatuses()) {
          optionals.set(2);
        }
        if (struct.isSetToken()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPipelineId()) {
          oprot.writeString(struct.pipelineId);
        }
        if (struct.isSetPipeId()) {
          oprot.writeString(struct.pipeId);
        }
        if (struct.isSetStatuses()) {
          {
            oprot.writeI32(struct.statuses.size());
            for (ObjectStatus _iter86 : struct.statuses)
            {
              oprot.writeI32(_iter86.getValue());
            }
          }
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEventCountPerPipe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.pipelineId = iprot.readString();
          struct.setPipelineIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pipeId = iprot.readString();
          struct.setPipeIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TSet _set87 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.statuses = new HashSet<ObjectStatus>(2*_set87.size);
            for (int _i88 = 0; _i88 < _set87.size; ++_i88)
            {
              ObjectStatus _elem89;
              _elem89 = ObjectStatus.findByValue(iprot.readI32());
              struct.statuses.add(_elem89);
            }
          }
          struct.setStatusesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class getEventCountPerPipe_result implements org.apache.thrift.TBase<getEventCountPerPipe_result, getEventCountPerPipe_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEventCountPerPipe_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEventCountPerPipe_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEventCountPerPipe_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEventCountPerPipe_resultTupleSchemeFactory());
    }

    public Set<EventWithCount> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EventWithCount.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEventCountPerPipe_result.class, metaDataMap);
    }

    public getEventCountPerPipe_result() {
    }

    public getEventCountPerPipe_result(
      Set<EventWithCount> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventCountPerPipe_result(getEventCountPerPipe_result other) {
      if (other.isSetSuccess()) {
        Set<EventWithCount> __this__success = new HashSet<EventWithCount>(other.success.size());
        for (EventWithCount other_element : other.success) {
          __this__success.add(new EventWithCount(other_element));
        }
        this.success = __this__success;
      }
    }

    public getEventCountPerPipe_result deepCopy() {
      return new getEventCountPerPipe_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<EventWithCount> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(EventWithCount elem) {
      if (this.success == null) {
        this.success = new HashSet<EventWithCount>();
      }
      this.success.add(elem);
    }

    public Set<EventWithCount> getSuccess() {
      return this.success;
    }

    public getEventCountPerPipe_result setSuccess(Set<EventWithCount> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<EventWithCount>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventCountPerPipe_result)
        return this.equals((getEventCountPerPipe_result)that);
      return false;
    }

    public boolean equals(getEventCountPerPipe_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getEventCountPerPipe_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEventCountPerPipe_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEventCountPerPipe_resultStandardSchemeFactory implements SchemeFactory {
      public getEventCountPerPipe_resultStandardScheme getScheme() {
        return new getEventCountPerPipe_resultStandardScheme();
      }
    }

    private static class getEventCountPerPipe_resultStandardScheme extends StandardScheme<getEventCountPerPipe_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEventCountPerPipe_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set90 = iprot.readSetBegin();
                  struct.success = new HashSet<EventWithCount>(2*_set90.size);
                  for (int _i91 = 0; _i91 < _set90.size; ++_i91)
                  {
                    EventWithCount _elem92;
                    _elem92 = new EventWithCount();
                    _elem92.read(iprot);
                    struct.success.add(_elem92);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEventCountPerPipe_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (EventWithCount _iter93 : struct.success)
            {
              _iter93.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEventCountPerPipe_resultTupleSchemeFactory implements SchemeFactory {
      public getEventCountPerPipe_resultTupleScheme getScheme() {
        return new getEventCountPerPipe_resultTupleScheme();
      }
    }

    private static class getEventCountPerPipe_resultTupleScheme extends TupleScheme<getEventCountPerPipe_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEventCountPerPipe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (EventWithCount _iter94 : struct.success)
            {
              _iter94.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEventCountPerPipe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set95 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashSet<EventWithCount>(2*_set95.size);
            for (int _i96 = 0; _i96 < _set95.size; ++_i96)
            {
              EventWithCount _elem97;
              _elem97 = new EventWithCount();
              _elem97.read(iprot);
              struct.success.add(_elem97);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCountPerPipe_args implements org.apache.thrift.TBase<getCountPerPipe_args, getCountPerPipe_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCountPerPipe_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCountPerPipe_args");

    private static final org.apache.thrift.protocol.TField PIPELINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipelineId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PIPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipeId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("statuses", org.apache.thrift.protocol.TType.SET, (short)3);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCountPerPipe_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCountPerPipe_argsTupleSchemeFactory());
    }

    public String pipelineId; // required
    public String pipeId; // required
    public Set<ObjectStatus> statuses; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PIPELINE_ID((short)1, "pipelineId"),
      PIPE_ID((short)2, "pipeId"),
      STATUSES((short)3, "statuses"),
      TOKEN((short)4, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PIPELINE_ID
            return PIPELINE_ID;
          case 2: // PIPE_ID
            return PIPE_ID;
          case 3: // STATUSES
            return STATUSES;
          case 4: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PIPELINE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipelineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PIPE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUSES, new org.apache.thrift.meta_data.FieldMetaData("statuses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ObjectStatus.class))));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCountPerPipe_args.class, metaDataMap);
    }

    public getCountPerPipe_args() {
    }

    public getCountPerPipe_args(
      String pipelineId,
      String pipeId,
      Set<ObjectStatus> statuses,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.pipelineId = pipelineId;
      this.pipeId = pipeId;
      this.statuses = statuses;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCountPerPipe_args(getCountPerPipe_args other) {
      if (other.isSetPipelineId()) {
        this.pipelineId = other.pipelineId;
      }
      if (other.isSetPipeId()) {
        this.pipeId = other.pipeId;
      }
      if (other.isSetStatuses()) {
        Set<ObjectStatus> __this__statuses = new HashSet<ObjectStatus>(other.statuses.size());
        for (ObjectStatus other_element : other.statuses) {
          __this__statuses.add(other_element);
        }
        this.statuses = __this__statuses;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public getCountPerPipe_args deepCopy() {
      return new getCountPerPipe_args(this);
    }

    @Override
    public void clear() {
      this.pipelineId = null;
      this.pipeId = null;
      this.statuses = null;
      this.token = null;
    }

    public String getPipelineId() {
      return this.pipelineId;
    }

    public getCountPerPipe_args setPipelineId(String pipelineId) {
      this.pipelineId = pipelineId;
      return this;
    }

    public void unsetPipelineId() {
      this.pipelineId = null;
    }

    /** Returns true if field pipelineId is set (has been assigned a value) and false otherwise */
    public boolean isSetPipelineId() {
      return this.pipelineId != null;
    }

    public void setPipelineIdIsSet(boolean value) {
      if (!value) {
        this.pipelineId = null;
      }
    }

    public String getPipeId() {
      return this.pipeId;
    }

    public getCountPerPipe_args setPipeId(String pipeId) {
      this.pipeId = pipeId;
      return this;
    }

    public void unsetPipeId() {
      this.pipeId = null;
    }

    /** Returns true if field pipeId is set (has been assigned a value) and false otherwise */
    public boolean isSetPipeId() {
      return this.pipeId != null;
    }

    public void setPipeIdIsSet(boolean value) {
      if (!value) {
        this.pipeId = null;
      }
    }

    public int getStatusesSize() {
      return (this.statuses == null) ? 0 : this.statuses.size();
    }

    public java.util.Iterator<ObjectStatus> getStatusesIterator() {
      return (this.statuses == null) ? null : this.statuses.iterator();
    }

    public void addToStatuses(ObjectStatus elem) {
      if (this.statuses == null) {
        this.statuses = new HashSet<ObjectStatus>();
      }
      this.statuses.add(elem);
    }

    public Set<ObjectStatus> getStatuses() {
      return this.statuses;
    }

    public getCountPerPipe_args setStatuses(Set<ObjectStatus> statuses) {
      this.statuses = statuses;
      return this;
    }

    public void unsetStatuses() {
      this.statuses = null;
    }

    /** Returns true if field statuses is set (has been assigned a value) and false otherwise */
    public boolean isSetStatuses() {
      return this.statuses != null;
    }

    public void setStatusesIsSet(boolean value) {
      if (!value) {
        this.statuses = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public getCountPerPipe_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PIPELINE_ID:
        if (value == null) {
          unsetPipelineId();
        } else {
          setPipelineId((String)value);
        }
        break;

      case PIPE_ID:
        if (value == null) {
          unsetPipeId();
        } else {
          setPipeId((String)value);
        }
        break;

      case STATUSES:
        if (value == null) {
          unsetStatuses();
        } else {
          setStatuses((Set<ObjectStatus>)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PIPELINE_ID:
        return getPipelineId();

      case PIPE_ID:
        return getPipeId();

      case STATUSES:
        return getStatuses();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PIPELINE_ID:
        return isSetPipelineId();
      case PIPE_ID:
        return isSetPipeId();
      case STATUSES:
        return isSetStatuses();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCountPerPipe_args)
        return this.equals((getCountPerPipe_args)that);
      return false;
    }

    public boolean equals(getCountPerPipe_args that) {
      if (that == null)
        return false;

      boolean this_present_pipelineId = true && this.isSetPipelineId();
      boolean that_present_pipelineId = true && that.isSetPipelineId();
      if (this_present_pipelineId || that_present_pipelineId) {
        if (!(this_present_pipelineId && that_present_pipelineId))
          return false;
        if (!this.pipelineId.equals(that.pipelineId))
          return false;
      }

      boolean this_present_pipeId = true && this.isSetPipeId();
      boolean that_present_pipeId = true && that.isSetPipeId();
      if (this_present_pipeId || that_present_pipeId) {
        if (!(this_present_pipeId && that_present_pipeId))
          return false;
        if (!this.pipeId.equals(that.pipeId))
          return false;
      }

      boolean this_present_statuses = true && this.isSetStatuses();
      boolean that_present_statuses = true && that.isSetStatuses();
      if (this_present_statuses || that_present_statuses) {
        if (!(this_present_statuses && that_present_statuses))
          return false;
        if (!this.statuses.equals(that.statuses))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCountPerPipe_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPipelineId()).compareTo(other.isSetPipelineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPipelineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipelineId, other.pipelineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPipeId()).compareTo(other.isSetPipeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPipeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipeId, other.pipeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatuses()).compareTo(other.isSetStatuses());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatuses()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statuses, other.statuses);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCountPerPipe_args(");
      boolean first = true;

      sb.append("pipelineId:");
      if (this.pipelineId == null) {
        sb.append("null");
      } else {
        sb.append(this.pipelineId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pipeId:");
      if (this.pipeId == null) {
        sb.append("null");
      } else {
        sb.append(this.pipeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("statuses:");
      if (this.statuses == null) {
        sb.append("null");
      } else {
        sb.append(this.statuses);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCountPerPipe_argsStandardSchemeFactory implements SchemeFactory {
      public getCountPerPipe_argsStandardScheme getScheme() {
        return new getCountPerPipe_argsStandardScheme();
      }
    }

    private static class getCountPerPipe_argsStandardScheme extends StandardScheme<getCountPerPipe_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCountPerPipe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PIPELINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pipelineId = iprot.readString();
                struct.setPipelineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PIPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pipeId = iprot.readString();
                struct.setPipeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATUSES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set98 = iprot.readSetBegin();
                  struct.statuses = new HashSet<ObjectStatus>(2*_set98.size);
                  for (int _i99 = 0; _i99 < _set98.size; ++_i99)
                  {
                    ObjectStatus _elem100;
                    _elem100 = ObjectStatus.findByValue(iprot.readI32());
                    struct.statuses.add(_elem100);
                  }
                  iprot.readSetEnd();
                }
                struct.setStatusesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCountPerPipe_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pipelineId != null) {
          oprot.writeFieldBegin(PIPELINE_ID_FIELD_DESC);
          oprot.writeString(struct.pipelineId);
          oprot.writeFieldEnd();
        }
        if (struct.pipeId != null) {
          oprot.writeFieldBegin(PIPE_ID_FIELD_DESC);
          oprot.writeString(struct.pipeId);
          oprot.writeFieldEnd();
        }
        if (struct.statuses != null) {
          oprot.writeFieldBegin(STATUSES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.statuses.size()));
            for (ObjectStatus _iter101 : struct.statuses)
            {
              oprot.writeI32(_iter101.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCountPerPipe_argsTupleSchemeFactory implements SchemeFactory {
      public getCountPerPipe_argsTupleScheme getScheme() {
        return new getCountPerPipe_argsTupleScheme();
      }
    }

    private static class getCountPerPipe_argsTupleScheme extends TupleScheme<getCountPerPipe_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCountPerPipe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPipelineId()) {
          optionals.set(0);
        }
        if (struct.isSetPipeId()) {
          optionals.set(1);
        }
        if (struct.isSetStatuses()) {
          optionals.set(2);
        }
        if (struct.isSetToken()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPipelineId()) {
          oprot.writeString(struct.pipelineId);
        }
        if (struct.isSetPipeId()) {
          oprot.writeString(struct.pipeId);
        }
        if (struct.isSetStatuses()) {
          {
            oprot.writeI32(struct.statuses.size());
            for (ObjectStatus _iter102 : struct.statuses)
            {
              oprot.writeI32(_iter102.getValue());
            }
          }
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCountPerPipe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.pipelineId = iprot.readString();
          struct.setPipelineIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pipeId = iprot.readString();
          struct.setPipeIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TSet _set103 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.statuses = new HashSet<ObjectStatus>(2*_set103.size);
            for (int _i104 = 0; _i104 < _set103.size; ++_i104)
            {
              ObjectStatus _elem105;
              _elem105 = ObjectStatus.findByValue(iprot.readI32());
              struct.statuses.add(_elem105);
            }
          }
          struct.setStatusesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class getCountPerPipe_result implements org.apache.thrift.TBase<getCountPerPipe_result, getCountPerPipe_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCountPerPipe_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCountPerPipe_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCountPerPipe_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCountPerPipe_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCountPerPipe_result.class, metaDataMap);
    }

    public getCountPerPipe_result() {
    }

    public getCountPerPipe_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCountPerPipe_result(getCountPerPipe_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getCountPerPipe_result deepCopy() {
      return new getCountPerPipe_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getCountPerPipe_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCountPerPipe_result)
        return this.equals((getCountPerPipe_result)that);
      return false;
    }

    public boolean equals(getCountPerPipe_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCountPerPipe_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCountPerPipe_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCountPerPipe_resultStandardSchemeFactory implements SchemeFactory {
      public getCountPerPipe_resultStandardScheme getScheme() {
        return new getCountPerPipe_resultStandardScheme();
      }
    }

    private static class getCountPerPipe_resultStandardScheme extends StandardScheme<getCountPerPipe_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCountPerPipe_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCountPerPipe_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCountPerPipe_resultTupleSchemeFactory implements SchemeFactory {
      public getCountPerPipe_resultTupleScheme getScheme() {
        return new getCountPerPipe_resultTupleScheme();
      }
    }

    private static class getCountPerPipe_resultTupleScheme extends TupleScheme<getCountPerPipe_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCountPerPipe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCountPerPipe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getObjectsForPipeAndEvent_args implements org.apache.thrift.TBase<getObjectsForPipeAndEvent_args, getObjectsForPipeAndEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getObjectsForPipeAndEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getObjectsForPipeAndEvent_args");

    private static final org.apache.thrift.protocol.TField PIPELINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipelineId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PIPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipeId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("statuses", org.apache.thrift.protocol.TType.SET, (short)4);
    private static final org.apache.thrift.protocol.TField PAGE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNumber", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getObjectsForPipeAndEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getObjectsForPipeAndEvent_argsTupleSchemeFactory());
    }

    public String pipelineId; // required
    public String pipeId; // required
    public String event; // required
    public Set<ObjectStatus> statuses; // required
    public int pageNumber; // required
    public int pageSize; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PIPELINE_ID((short)1, "pipelineId"),
      PIPE_ID((short)2, "pipeId"),
      EVENT((short)3, "event"),
      STATUSES((short)4, "statuses"),
      PAGE_NUMBER((short)5, "pageNumber"),
      PAGE_SIZE((short)6, "pageSize"),
      TOKEN((short)7, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PIPELINE_ID
            return PIPELINE_ID;
          case 2: // PIPE_ID
            return PIPE_ID;
          case 3: // EVENT
            return EVENT;
          case 4: // STATUSES
            return STATUSES;
          case 5: // PAGE_NUMBER
            return PAGE_NUMBER;
          case 6: // PAGE_SIZE
            return PAGE_SIZE;
          case 7: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUMBER_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PIPELINE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipelineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PIPE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("event", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUSES, new org.apache.thrift.meta_data.FieldMetaData("statuses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ObjectStatus.class))));
      tmpMap.put(_Fields.PAGE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("pageNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getObjectsForPipeAndEvent_args.class, metaDataMap);
    }

    public getObjectsForPipeAndEvent_args() {
    }

    public getObjectsForPipeAndEvent_args(
      String pipelineId,
      String pipeId,
      String event,
      Set<ObjectStatus> statuses,
      int pageNumber,
      int pageSize,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.pipelineId = pipelineId;
      this.pipeId = pipeId;
      this.event = event;
      this.statuses = statuses;
      this.pageNumber = pageNumber;
      setPageNumberIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getObjectsForPipeAndEvent_args(getObjectsForPipeAndEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPipelineId()) {
        this.pipelineId = other.pipelineId;
      }
      if (other.isSetPipeId()) {
        this.pipeId = other.pipeId;
      }
      if (other.isSetEvent()) {
        this.event = other.event;
      }
      if (other.isSetStatuses()) {
        Set<ObjectStatus> __this__statuses = new HashSet<ObjectStatus>(other.statuses.size());
        for (ObjectStatus other_element : other.statuses) {
          __this__statuses.add(other_element);
        }
        this.statuses = __this__statuses;
      }
      this.pageNumber = other.pageNumber;
      this.pageSize = other.pageSize;
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public getObjectsForPipeAndEvent_args deepCopy() {
      return new getObjectsForPipeAndEvent_args(this);
    }

    @Override
    public void clear() {
      this.pipelineId = null;
      this.pipeId = null;
      this.event = null;
      this.statuses = null;
      setPageNumberIsSet(false);
      this.pageNumber = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      this.token = null;
    }

    public String getPipelineId() {
      return this.pipelineId;
    }

    public getObjectsForPipeAndEvent_args setPipelineId(String pipelineId) {
      this.pipelineId = pipelineId;
      return this;
    }

    public void unsetPipelineId() {
      this.pipelineId = null;
    }

    /** Returns true if field pipelineId is set (has been assigned a value) and false otherwise */
    public boolean isSetPipelineId() {
      return this.pipelineId != null;
    }

    public void setPipelineIdIsSet(boolean value) {
      if (!value) {
        this.pipelineId = null;
      }
    }

    public String getPipeId() {
      return this.pipeId;
    }

    public getObjectsForPipeAndEvent_args setPipeId(String pipeId) {
      this.pipeId = pipeId;
      return this;
    }

    public void unsetPipeId() {
      this.pipeId = null;
    }

    /** Returns true if field pipeId is set (has been assigned a value) and false otherwise */
    public boolean isSetPipeId() {
      return this.pipeId != null;
    }

    public void setPipeIdIsSet(boolean value) {
      if (!value) {
        this.pipeId = null;
      }
    }

    public String getEvent() {
      return this.event;
    }

    public getObjectsForPipeAndEvent_args setEvent(String event) {
      this.event = event;
      return this;
    }

    public void unsetEvent() {
      this.event = null;
    }

    /** Returns true if field event is set (has been assigned a value) and false otherwise */
    public boolean isSetEvent() {
      return this.event != null;
    }

    public void setEventIsSet(boolean value) {
      if (!value) {
        this.event = null;
      }
    }

    public int getStatusesSize() {
      return (this.statuses == null) ? 0 : this.statuses.size();
    }

    public java.util.Iterator<ObjectStatus> getStatusesIterator() {
      return (this.statuses == null) ? null : this.statuses.iterator();
    }

    public void addToStatuses(ObjectStatus elem) {
      if (this.statuses == null) {
        this.statuses = new HashSet<ObjectStatus>();
      }
      this.statuses.add(elem);
    }

    public Set<ObjectStatus> getStatuses() {
      return this.statuses;
    }

    public getObjectsForPipeAndEvent_args setStatuses(Set<ObjectStatus> statuses) {
      this.statuses = statuses;
      return this;
    }

    public void unsetStatuses() {
      this.statuses = null;
    }

    /** Returns true if field statuses is set (has been assigned a value) and false otherwise */
    public boolean isSetStatuses() {
      return this.statuses != null;
    }

    public void setStatusesIsSet(boolean value) {
      if (!value) {
        this.statuses = null;
      }
    }

    public int getPageNumber() {
      return this.pageNumber;
    }

    public getObjectsForPipeAndEvent_args setPageNumber(int pageNumber) {
      this.pageNumber = pageNumber;
      setPageNumberIsSet(true);
      return this;
    }

    public void unsetPageNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUMBER_ISSET_ID);
    }

    /** Returns true if field pageNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUMBER_ISSET_ID);
    }

    public void setPageNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUMBER_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getObjectsForPipeAndEvent_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public getObjectsForPipeAndEvent_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PIPELINE_ID:
        if (value == null) {
          unsetPipelineId();
        } else {
          setPipelineId((String)value);
        }
        break;

      case PIPE_ID:
        if (value == null) {
          unsetPipeId();
        } else {
          setPipeId((String)value);
        }
        break;

      case EVENT:
        if (value == null) {
          unsetEvent();
        } else {
          setEvent((String)value);
        }
        break;

      case STATUSES:
        if (value == null) {
          unsetStatuses();
        } else {
          setStatuses((Set<ObjectStatus>)value);
        }
        break;

      case PAGE_NUMBER:
        if (value == null) {
          unsetPageNumber();
        } else {
          setPageNumber((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PIPELINE_ID:
        return getPipelineId();

      case PIPE_ID:
        return getPipeId();

      case EVENT:
        return getEvent();

      case STATUSES:
        return getStatuses();

      case PAGE_NUMBER:
        return Integer.valueOf(getPageNumber());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PIPELINE_ID:
        return isSetPipelineId();
      case PIPE_ID:
        return isSetPipeId();
      case EVENT:
        return isSetEvent();
      case STATUSES:
        return isSetStatuses();
      case PAGE_NUMBER:
        return isSetPageNumber();
      case PAGE_SIZE:
        return isSetPageSize();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getObjectsForPipeAndEvent_args)
        return this.equals((getObjectsForPipeAndEvent_args)that);
      return false;
    }

    public boolean equals(getObjectsForPipeAndEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_pipelineId = true && this.isSetPipelineId();
      boolean that_present_pipelineId = true && that.isSetPipelineId();
      if (this_present_pipelineId || that_present_pipelineId) {
        if (!(this_present_pipelineId && that_present_pipelineId))
          return false;
        if (!this.pipelineId.equals(that.pipelineId))
          return false;
      }

      boolean this_present_pipeId = true && this.isSetPipeId();
      boolean that_present_pipeId = true && that.isSetPipeId();
      if (this_present_pipeId || that_present_pipeId) {
        if (!(this_present_pipeId && that_present_pipeId))
          return false;
        if (!this.pipeId.equals(that.pipeId))
          return false;
      }

      boolean this_present_event = true && this.isSetEvent();
      boolean that_present_event = true && that.isSetEvent();
      if (this_present_event || that_present_event) {
        if (!(this_present_event && that_present_event))
          return false;
        if (!this.event.equals(that.event))
          return false;
      }

      boolean this_present_statuses = true && this.isSetStatuses();
      boolean that_present_statuses = true && that.isSetStatuses();
      if (this_present_statuses || that_present_statuses) {
        if (!(this_present_statuses && that_present_statuses))
          return false;
        if (!this.statuses.equals(that.statuses))
          return false;
      }

      boolean this_present_pageNumber = true;
      boolean that_present_pageNumber = true;
      if (this_present_pageNumber || that_present_pageNumber) {
        if (!(this_present_pageNumber && that_present_pageNumber))
          return false;
        if (this.pageNumber != that.pageNumber)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getObjectsForPipeAndEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPipelineId()).compareTo(other.isSetPipelineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPipelineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipelineId, other.pipelineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPipeId()).compareTo(other.isSetPipeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPipeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipeId, other.pipeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEvent()).compareTo(other.isSetEvent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event, other.event);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatuses()).compareTo(other.isSetStatuses());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatuses()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statuses, other.statuses);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNumber()).compareTo(other.isSetPageNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNumber, other.pageNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getObjectsForPipeAndEvent_args(");
      boolean first = true;

      sb.append("pipelineId:");
      if (this.pipelineId == null) {
        sb.append("null");
      } else {
        sb.append(this.pipelineId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pipeId:");
      if (this.pipeId == null) {
        sb.append("null");
      } else {
        sb.append(this.pipeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("event:");
      if (this.event == null) {
        sb.append("null");
      } else {
        sb.append(this.event);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("statuses:");
      if (this.statuses == null) {
        sb.append("null");
      } else {
        sb.append(this.statuses);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNumber:");
      sb.append(this.pageNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getObjectsForPipeAndEvent_argsStandardSchemeFactory implements SchemeFactory {
      public getObjectsForPipeAndEvent_argsStandardScheme getScheme() {
        return new getObjectsForPipeAndEvent_argsStandardScheme();
      }
    }

    private static class getObjectsForPipeAndEvent_argsStandardScheme extends StandardScheme<getObjectsForPipeAndEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getObjectsForPipeAndEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PIPELINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pipelineId = iprot.readString();
                struct.setPipelineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PIPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pipeId = iprot.readString();
                struct.setPipeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EVENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.event = iprot.readString();
                struct.setEventIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // STATUSES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set106 = iprot.readSetBegin();
                  struct.statuses = new HashSet<ObjectStatus>(2*_set106.size);
                  for (int _i107 = 0; _i107 < _set106.size; ++_i107)
                  {
                    ObjectStatus _elem108;
                    _elem108 = ObjectStatus.findByValue(iprot.readI32());
                    struct.statuses.add(_elem108);
                  }
                  iprot.readSetEnd();
                }
                struct.setStatusesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PAGE_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNumber = iprot.readI32();
                struct.setPageNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getObjectsForPipeAndEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pipelineId != null) {
          oprot.writeFieldBegin(PIPELINE_ID_FIELD_DESC);
          oprot.writeString(struct.pipelineId);
          oprot.writeFieldEnd();
        }
        if (struct.pipeId != null) {
          oprot.writeFieldBegin(PIPE_ID_FIELD_DESC);
          oprot.writeString(struct.pipeId);
          oprot.writeFieldEnd();
        }
        if (struct.event != null) {
          oprot.writeFieldBegin(EVENT_FIELD_DESC);
          oprot.writeString(struct.event);
          oprot.writeFieldEnd();
        }
        if (struct.statuses != null) {
          oprot.writeFieldBegin(STATUSES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.statuses.size()));
            for (ObjectStatus _iter109 : struct.statuses)
            {
              oprot.writeI32(_iter109.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.pageNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getObjectsForPipeAndEvent_argsTupleSchemeFactory implements SchemeFactory {
      public getObjectsForPipeAndEvent_argsTupleScheme getScheme() {
        return new getObjectsForPipeAndEvent_argsTupleScheme();
      }
    }

    private static class getObjectsForPipeAndEvent_argsTupleScheme extends TupleScheme<getObjectsForPipeAndEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getObjectsForPipeAndEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPipelineId()) {
          optionals.set(0);
        }
        if (struct.isSetPipeId()) {
          optionals.set(1);
        }
        if (struct.isSetEvent()) {
          optionals.set(2);
        }
        if (struct.isSetStatuses()) {
          optionals.set(3);
        }
        if (struct.isSetPageNumber()) {
          optionals.set(4);
        }
        if (struct.isSetPageSize()) {
          optionals.set(5);
        }
        if (struct.isSetToken()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetPipelineId()) {
          oprot.writeString(struct.pipelineId);
        }
        if (struct.isSetPipeId()) {
          oprot.writeString(struct.pipeId);
        }
        if (struct.isSetEvent()) {
          oprot.writeString(struct.event);
        }
        if (struct.isSetStatuses()) {
          {
            oprot.writeI32(struct.statuses.size());
            for (ObjectStatus _iter110 : struct.statuses)
            {
              oprot.writeI32(_iter110.getValue());
            }
          }
        }
        if (struct.isSetPageNumber()) {
          oprot.writeI32(struct.pageNumber);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getObjectsForPipeAndEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.pipelineId = iprot.readString();
          struct.setPipelineIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pipeId = iprot.readString();
          struct.setPipeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.event = iprot.readString();
          struct.setEventIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TSet _set111 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.statuses = new HashSet<ObjectStatus>(2*_set111.size);
            for (int _i112 = 0; _i112 < _set111.size; ++_i112)
            {
              ObjectStatus _elem113;
              _elem113 = ObjectStatus.findByValue(iprot.readI32());
              struct.statuses.add(_elem113);
            }
          }
          struct.setStatusesIsSet(true);
        }
        if (incoming.get(4)) {
          struct.pageNumber = iprot.readI32();
          struct.setPageNumberIsSet(true);
        }
        if (incoming.get(5)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class getObjectsForPipeAndEvent_result implements org.apache.thrift.TBase<getObjectsForPipeAndEvent_result, getObjectsForPipeAndEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getObjectsForPipeAndEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getObjectsForPipeAndEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getObjectsForPipeAndEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getObjectsForPipeAndEvent_resultTupleSchemeFactory());
    }

    public IdsResponse success; // required
    public ObjectNotQuarantinedException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IdsResponse.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getObjectsForPipeAndEvent_result.class, metaDataMap);
    }

    public getObjectsForPipeAndEvent_result() {
    }

    public getObjectsForPipeAndEvent_result(
      IdsResponse success,
      ObjectNotQuarantinedException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getObjectsForPipeAndEvent_result(getObjectsForPipeAndEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new IdsResponse(other.success);
      }
      if (other.isSetE()) {
        this.e = new ObjectNotQuarantinedException(other.e);
      }
    }

    public getObjectsForPipeAndEvent_result deepCopy() {
      return new getObjectsForPipeAndEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public IdsResponse getSuccess() {
      return this.success;
    }

    public getObjectsForPipeAndEvent_result setSuccess(IdsResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ObjectNotQuarantinedException getE() {
      return this.e;
    }

    public getObjectsForPipeAndEvent_result setE(ObjectNotQuarantinedException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((IdsResponse)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ObjectNotQuarantinedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getObjectsForPipeAndEvent_result)
        return this.equals((getObjectsForPipeAndEvent_result)that);
      return false;
    }

    public boolean equals(getObjectsForPipeAndEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getObjectsForPipeAndEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getObjectsForPipeAndEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getObjectsForPipeAndEvent_resultStandardSchemeFactory implements SchemeFactory {
      public getObjectsForPipeAndEvent_resultStandardScheme getScheme() {
        return new getObjectsForPipeAndEvent_resultStandardScheme();
      }
    }

    private static class getObjectsForPipeAndEvent_resultStandardScheme extends StandardScheme<getObjectsForPipeAndEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getObjectsForPipeAndEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new IdsResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ObjectNotQuarantinedException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getObjectsForPipeAndEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getObjectsForPipeAndEvent_resultTupleSchemeFactory implements SchemeFactory {
      public getObjectsForPipeAndEvent_resultTupleScheme getScheme() {
        return new getObjectsForPipeAndEvent_resultTupleScheme();
      }
    }

    private static class getObjectsForPipeAndEvent_resultTupleScheme extends TupleScheme<getObjectsForPipeAndEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getObjectsForPipeAndEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getObjectsForPipeAndEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new IdsResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ObjectNotQuarantinedException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getQuarantinedObjects_args implements org.apache.thrift.TBase<getQuarantinedObjects_args, getQuarantinedObjects_args._Fields>, java.io.Serializable, Cloneable, Comparable<getQuarantinedObjects_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQuarantinedObjects_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getQuarantinedObjects_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getQuarantinedObjects_argsTupleSchemeFactory());
    }

    public List<String> ids; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      TOKEN((short)2, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQuarantinedObjects_args.class, metaDataMap);
    }

    public getQuarantinedObjects_args() {
    }

    public getQuarantinedObjects_args(
      List<String> ids,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.ids = ids;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQuarantinedObjects_args(getQuarantinedObjects_args other) {
      if (other.isSetIds()) {
        List<String> __this__ids = new ArrayList<String>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public getQuarantinedObjects_args deepCopy() {
      return new getQuarantinedObjects_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.token = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<String> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(String elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<String>();
      }
      this.ids.add(elem);
    }

    public List<String> getIds() {
      return this.ids;
    }

    public getQuarantinedObjects_args setIds(List<String> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public getQuarantinedObjects_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<String>)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getQuarantinedObjects_args)
        return this.equals((getQuarantinedObjects_args)that);
      return false;
    }

    public boolean equals(getQuarantinedObjects_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getQuarantinedObjects_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getQuarantinedObjects_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQuarantinedObjects_argsStandardSchemeFactory implements SchemeFactory {
      public getQuarantinedObjects_argsStandardScheme getScheme() {
        return new getQuarantinedObjects_argsStandardScheme();
      }
    }

    private static class getQuarantinedObjects_argsStandardScheme extends StandardScheme<getQuarantinedObjects_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQuarantinedObjects_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list114 = iprot.readListBegin();
                  struct.ids = new ArrayList<String>(_list114.size);
                  for (int _i115 = 0; _i115 < _list114.size; ++_i115)
                  {
                    String _elem116;
                    _elem116 = iprot.readString();
                    struct.ids.add(_elem116);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQuarantinedObjects_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ids.size()));
            for (String _iter117 : struct.ids)
            {
              oprot.writeString(_iter117);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQuarantinedObjects_argsTupleSchemeFactory implements SchemeFactory {
      public getQuarantinedObjects_argsTupleScheme getScheme() {
        return new getQuarantinedObjects_argsTupleScheme();
      }
    }

    private static class getQuarantinedObjects_argsTupleScheme extends TupleScheme<getQuarantinedObjects_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQuarantinedObjects_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetToken()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (String _iter118 : struct.ids)
            {
              oprot.writeString(_iter118);
            }
          }
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQuarantinedObjects_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.ids = new ArrayList<String>(_list119.size);
            for (int _i120 = 0; _i120 < _list119.size; ++_i120)
            {
              String _elem121;
              _elem121 = iprot.readString();
              struct.ids.add(_elem121);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class getQuarantinedObjects_result implements org.apache.thrift.TBase<getQuarantinedObjects_result, getQuarantinedObjects_result._Fields>, java.io.Serializable, Cloneable, Comparable<getQuarantinedObjects_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQuarantinedObjects_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getQuarantinedObjects_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getQuarantinedObjects_resultTupleSchemeFactory());
    }

    public List<QuarantineResult> success; // required
    public ObjectNotQuarantinedException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QuarantineResult.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQuarantinedObjects_result.class, metaDataMap);
    }

    public getQuarantinedObjects_result() {
    }

    public getQuarantinedObjects_result(
      List<QuarantineResult> success,
      ObjectNotQuarantinedException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQuarantinedObjects_result(getQuarantinedObjects_result other) {
      if (other.isSetSuccess()) {
        List<QuarantineResult> __this__success = new ArrayList<QuarantineResult>(other.success.size());
        for (QuarantineResult other_element : other.success) {
          __this__success.add(new QuarantineResult(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ObjectNotQuarantinedException(other.e);
      }
    }

    public getQuarantinedObjects_result deepCopy() {
      return new getQuarantinedObjects_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<QuarantineResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(QuarantineResult elem) {
      if (this.success == null) {
        this.success = new ArrayList<QuarantineResult>();
      }
      this.success.add(elem);
    }

    public List<QuarantineResult> getSuccess() {
      return this.success;
    }

    public getQuarantinedObjects_result setSuccess(List<QuarantineResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ObjectNotQuarantinedException getE() {
      return this.e;
    }

    public getQuarantinedObjects_result setE(ObjectNotQuarantinedException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<QuarantineResult>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ObjectNotQuarantinedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getQuarantinedObjects_result)
        return this.equals((getQuarantinedObjects_result)that);
      return false;
    }

    public boolean equals(getQuarantinedObjects_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getQuarantinedObjects_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getQuarantinedObjects_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQuarantinedObjects_resultStandardSchemeFactory implements SchemeFactory {
      public getQuarantinedObjects_resultStandardScheme getScheme() {
        return new getQuarantinedObjects_resultStandardScheme();
      }
    }

    private static class getQuarantinedObjects_resultStandardScheme extends StandardScheme<getQuarantinedObjects_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQuarantinedObjects_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list122 = iprot.readListBegin();
                  struct.success = new ArrayList<QuarantineResult>(_list122.size);
                  for (int _i123 = 0; _i123 < _list122.size; ++_i123)
                  {
                    QuarantineResult _elem124;
                    _elem124 = new QuarantineResult();
                    _elem124.read(iprot);
                    struct.success.add(_elem124);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ObjectNotQuarantinedException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQuarantinedObjects_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (QuarantineResult _iter125 : struct.success)
            {
              _iter125.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQuarantinedObjects_resultTupleSchemeFactory implements SchemeFactory {
      public getQuarantinedObjects_resultTupleScheme getScheme() {
        return new getQuarantinedObjects_resultTupleScheme();
      }
    }

    private static class getQuarantinedObjects_resultTupleScheme extends TupleScheme<getQuarantinedObjects_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQuarantinedObjects_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (QuarantineResult _iter126 : struct.success)
            {
              _iter126.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQuarantinedObjects_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<QuarantineResult>(_list127.size);
            for (int _i128 = 0; _i128 < _list127.size; ++_i128)
            {
              QuarantineResult _elem129;
              _elem129 = new QuarantineResult();
              _elem129.read(iprot);
              struct.success.add(_elem129);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ObjectNotQuarantinedException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateStatus_args implements org.apache.thrift.TBase<updateStatus_args, updateStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStatus_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField UPDATE_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateComment", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStatus_argsTupleSchemeFactory());
    }

    public List<String> ids; // required
    /**
     * 
     * @see ObjectStatus
     */
    public ObjectStatus status; // required
    public String updateComment; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      /**
       * 
       * @see ObjectStatus
       */
      STATUS((short)2, "status"),
      UPDATE_COMMENT((short)3, "updateComment"),
      TOKEN((short)4, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // STATUS
            return STATUS;
          case 3: // UPDATE_COMMENT
            return UPDATE_COMMENT;
          case 4: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ObjectStatus.class)));
      tmpMap.put(_Fields.UPDATE_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("updateComment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStatus_args.class, metaDataMap);
    }

    public updateStatus_args() {
    }

    public updateStatus_args(
      List<String> ids,
      ObjectStatus status,
      String updateComment,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.ids = ids;
      this.status = status;
      this.updateComment = updateComment;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStatus_args(updateStatus_args other) {
      if (other.isSetIds()) {
        List<String> __this__ids = new ArrayList<String>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetStatus()) {
        this.status = other.status;
      }
      if (other.isSetUpdateComment()) {
        this.updateComment = other.updateComment;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public updateStatus_args deepCopy() {
      return new updateStatus_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.status = null;
      this.updateComment = null;
      this.token = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<String> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(String elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<String>();
      }
      this.ids.add(elem);
    }

    public List<String> getIds() {
      return this.ids;
    }

    public updateStatus_args setIds(List<String> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    /**
     * 
     * @see ObjectStatus
     */
    public ObjectStatus getStatus() {
      return this.status;
    }

    /**
     * 
     * @see ObjectStatus
     */
    public updateStatus_args setStatus(ObjectStatus status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public String getUpdateComment() {
      return this.updateComment;
    }

    public updateStatus_args setUpdateComment(String updateComment) {
      this.updateComment = updateComment;
      return this;
    }

    public void unsetUpdateComment() {
      this.updateComment = null;
    }

    /** Returns true if field updateComment is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateComment() {
      return this.updateComment != null;
    }

    public void setUpdateCommentIsSet(boolean value) {
      if (!value) {
        this.updateComment = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public updateStatus_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<String>)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((ObjectStatus)value);
        }
        break;

      case UPDATE_COMMENT:
        if (value == null) {
          unsetUpdateComment();
        } else {
          setUpdateComment((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case STATUS:
        return getStatus();

      case UPDATE_COMMENT:
        return getUpdateComment();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case STATUS:
        return isSetStatus();
      case UPDATE_COMMENT:
        return isSetUpdateComment();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStatus_args)
        return this.equals((updateStatus_args)that);
      return false;
    }

    public boolean equals(updateStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      boolean this_present_updateComment = true && this.isSetUpdateComment();
      boolean that_present_updateComment = true && that.isSetUpdateComment();
      if (this_present_updateComment || that_present_updateComment) {
        if (!(this_present_updateComment && that_present_updateComment))
          return false;
        if (!this.updateComment.equals(that.updateComment))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpdateComment()).compareTo(other.isSetUpdateComment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateComment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateComment, other.updateComment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStatus_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("updateComment:");
      if (this.updateComment == null) {
        sb.append("null");
      } else {
        sb.append(this.updateComment);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateStatus_argsStandardScheme getScheme() {
        return new updateStatus_argsStandardScheme();
      }
    }

    private static class updateStatus_argsStandardScheme extends StandardScheme<updateStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                  struct.ids = new ArrayList<String>(_list130.size);
                  for (int _i131 = 0; _i131 < _list130.size; ++_i131)
                  {
                    String _elem132;
                    _elem132 = iprot.readString();
                    struct.ids.add(_elem132);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = ObjectStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UPDATE_COMMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.updateComment = iprot.readString();
                struct.setUpdateCommentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ids.size()));
            for (String _iter133 : struct.ids)
            {
              oprot.writeString(_iter133);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.updateComment != null) {
          oprot.writeFieldBegin(UPDATE_COMMENT_FIELD_DESC);
          oprot.writeString(struct.updateComment);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateStatus_argsTupleScheme getScheme() {
        return new updateStatus_argsTupleScheme();
      }
    }

    private static class updateStatus_argsTupleScheme extends TupleScheme<updateStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        if (struct.isSetUpdateComment()) {
          optionals.set(2);
        }
        if (struct.isSetToken()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (String _iter134 : struct.ids)
            {
              oprot.writeString(_iter134);
            }
          }
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status.getValue());
        }
        if (struct.isSetUpdateComment()) {
          oprot.writeString(struct.updateComment);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list135 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.ids = new ArrayList<String>(_list135.size);
            for (int _i136 = 0; _i136 < _list135.size; ++_i136)
            {
              String _elem137;
              _elem137 = iprot.readString();
              struct.ids.add(_elem137);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = ObjectStatus.findByValue(iprot.readI32());
          struct.setStatusIsSet(true);
        }
        if (incoming.get(2)) {
          struct.updateComment = iprot.readString();
          struct.setUpdateCommentIsSet(true);
        }
        if (incoming.get(3)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class updateStatus_result implements org.apache.thrift.TBase<updateStatus_result, updateStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStatus_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStatus_resultTupleSchemeFactory());
    }

    public InvalidUpdateException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStatus_result.class, metaDataMap);
    }

    public updateStatus_result() {
    }

    public updateStatus_result(
      InvalidUpdateException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStatus_result(updateStatus_result other) {
      if (other.isSetE()) {
        this.e = new InvalidUpdateException(other.e);
      }
    }

    public updateStatus_result deepCopy() {
      return new updateStatus_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public InvalidUpdateException getE() {
      return this.e;
    }

    public updateStatus_result setE(InvalidUpdateException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((InvalidUpdateException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStatus_result)
        return this.equals((updateStatus_result)that);
      return false;
    }

    public boolean equals(updateStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStatus_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateStatus_resultStandardScheme getScheme() {
        return new updateStatus_resultStandardScheme();
      }
    }

    private static class updateStatus_resultStandardScheme extends StandardScheme<updateStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new InvalidUpdateException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateStatus_resultTupleScheme getScheme() {
        return new updateStatus_resultTupleScheme();
      }
    }

    private static class updateStatus_resultTupleScheme extends TupleScheme<updateStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new InvalidUpdateException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateStatusOfEvent_args implements org.apache.thrift.TBase<updateStatusOfEvent_args, updateStatusOfEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateStatusOfEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStatusOfEvent_args");

    private static final org.apache.thrift.protocol.TField PIPELINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipelineId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PIPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipeId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OLD_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("oldStatus", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField NEW_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("newStatus", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField OLD_EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("oldEvent", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField UPDATE_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateComment", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStatusOfEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStatusOfEvent_argsTupleSchemeFactory());
    }

    public String pipelineId; // required
    public String pipeId; // required
    /**
     * 
     * @see ObjectStatus
     */
    public ObjectStatus oldStatus; // required
    /**
     * 
     * @see ObjectStatus
     */
    public ObjectStatus newStatus; // required
    public String oldEvent; // required
    public String updateComment; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PIPELINE_ID((short)1, "pipelineId"),
      PIPE_ID((short)2, "pipeId"),
      /**
       * 
       * @see ObjectStatus
       */
      OLD_STATUS((short)3, "oldStatus"),
      /**
       * 
       * @see ObjectStatus
       */
      NEW_STATUS((short)4, "newStatus"),
      OLD_EVENT((short)5, "oldEvent"),
      UPDATE_COMMENT((short)6, "updateComment"),
      TOKEN((short)7, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PIPELINE_ID
            return PIPELINE_ID;
          case 2: // PIPE_ID
            return PIPE_ID;
          case 3: // OLD_STATUS
            return OLD_STATUS;
          case 4: // NEW_STATUS
            return NEW_STATUS;
          case 5: // OLD_EVENT
            return OLD_EVENT;
          case 6: // UPDATE_COMMENT
            return UPDATE_COMMENT;
          case 7: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PIPELINE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipelineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PIPE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OLD_STATUS, new org.apache.thrift.meta_data.FieldMetaData("oldStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ObjectStatus.class)));
      tmpMap.put(_Fields.NEW_STATUS, new org.apache.thrift.meta_data.FieldMetaData("newStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ObjectStatus.class)));
      tmpMap.put(_Fields.OLD_EVENT, new org.apache.thrift.meta_data.FieldMetaData("oldEvent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UPDATE_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("updateComment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStatusOfEvent_args.class, metaDataMap);
    }

    public updateStatusOfEvent_args() {
    }

    public updateStatusOfEvent_args(
      String pipelineId,
      String pipeId,
      ObjectStatus oldStatus,
      ObjectStatus newStatus,
      String oldEvent,
      String updateComment,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.pipelineId = pipelineId;
      this.pipeId = pipeId;
      this.oldStatus = oldStatus;
      this.newStatus = newStatus;
      this.oldEvent = oldEvent;
      this.updateComment = updateComment;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStatusOfEvent_args(updateStatusOfEvent_args other) {
      if (other.isSetPipelineId()) {
        this.pipelineId = other.pipelineId;
      }
      if (other.isSetPipeId()) {
        this.pipeId = other.pipeId;
      }
      if (other.isSetOldStatus()) {
        this.oldStatus = other.oldStatus;
      }
      if (other.isSetNewStatus()) {
        this.newStatus = other.newStatus;
      }
      if (other.isSetOldEvent()) {
        this.oldEvent = other.oldEvent;
      }
      if (other.isSetUpdateComment()) {
        this.updateComment = other.updateComment;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public updateStatusOfEvent_args deepCopy() {
      return new updateStatusOfEvent_args(this);
    }

    @Override
    public void clear() {
      this.pipelineId = null;
      this.pipeId = null;
      this.oldStatus = null;
      this.newStatus = null;
      this.oldEvent = null;
      this.updateComment = null;
      this.token = null;
    }

    public String getPipelineId() {
      return this.pipelineId;
    }

    public updateStatusOfEvent_args setPipelineId(String pipelineId) {
      this.pipelineId = pipelineId;
      return this;
    }

    public void unsetPipelineId() {
      this.pipelineId = null;
    }

    /** Returns true if field pipelineId is set (has been assigned a value) and false otherwise */
    public boolean isSetPipelineId() {
      return this.pipelineId != null;
    }

    public void setPipelineIdIsSet(boolean value) {
      if (!value) {
        this.pipelineId = null;
      }
    }

    public String getPipeId() {
      return this.pipeId;
    }

    public updateStatusOfEvent_args setPipeId(String pipeId) {
      this.pipeId = pipeId;
      return this;
    }

    public void unsetPipeId() {
      this.pipeId = null;
    }

    /** Returns true if field pipeId is set (has been assigned a value) and false otherwise */
    public boolean isSetPipeId() {
      return this.pipeId != null;
    }

    public void setPipeIdIsSet(boolean value) {
      if (!value) {
        this.pipeId = null;
      }
    }

    /**
     * 
     * @see ObjectStatus
     */
    public ObjectStatus getOldStatus() {
      return this.oldStatus;
    }

    /**
     * 
     * @see ObjectStatus
     */
    public updateStatusOfEvent_args setOldStatus(ObjectStatus oldStatus) {
      this.oldStatus = oldStatus;
      return this;
    }

    public void unsetOldStatus() {
      this.oldStatus = null;
    }

    /** Returns true if field oldStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetOldStatus() {
      return this.oldStatus != null;
    }

    public void setOldStatusIsSet(boolean value) {
      if (!value) {
        this.oldStatus = null;
      }
    }

    /**
     * 
     * @see ObjectStatus
     */
    public ObjectStatus getNewStatus() {
      return this.newStatus;
    }

    /**
     * 
     * @see ObjectStatus
     */
    public updateStatusOfEvent_args setNewStatus(ObjectStatus newStatus) {
      this.newStatus = newStatus;
      return this;
    }

    public void unsetNewStatus() {
      this.newStatus = null;
    }

    /** Returns true if field newStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetNewStatus() {
      return this.newStatus != null;
    }

    public void setNewStatusIsSet(boolean value) {
      if (!value) {
        this.newStatus = null;
      }
    }

    public String getOldEvent() {
      return this.oldEvent;
    }

    public updateStatusOfEvent_args setOldEvent(String oldEvent) {
      this.oldEvent = oldEvent;
      return this;
    }

    public void unsetOldEvent() {
      this.oldEvent = null;
    }

    /** Returns true if field oldEvent is set (has been assigned a value) and false otherwise */
    public boolean isSetOldEvent() {
      return this.oldEvent != null;
    }

    public void setOldEventIsSet(boolean value) {
      if (!value) {
        this.oldEvent = null;
      }
    }

    public String getUpdateComment() {
      return this.updateComment;
    }

    public updateStatusOfEvent_args setUpdateComment(String updateComment) {
      this.updateComment = updateComment;
      return this;
    }

    public void unsetUpdateComment() {
      this.updateComment = null;
    }

    /** Returns true if field updateComment is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateComment() {
      return this.updateComment != null;
    }

    public void setUpdateCommentIsSet(boolean value) {
      if (!value) {
        this.updateComment = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public updateStatusOfEvent_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PIPELINE_ID:
        if (value == null) {
          unsetPipelineId();
        } else {
          setPipelineId((String)value);
        }
        break;

      case PIPE_ID:
        if (value == null) {
          unsetPipeId();
        } else {
          setPipeId((String)value);
        }
        break;

      case OLD_STATUS:
        if (value == null) {
          unsetOldStatus();
        } else {
          setOldStatus((ObjectStatus)value);
        }
        break;

      case NEW_STATUS:
        if (value == null) {
          unsetNewStatus();
        } else {
          setNewStatus((ObjectStatus)value);
        }
        break;

      case OLD_EVENT:
        if (value == null) {
          unsetOldEvent();
        } else {
          setOldEvent((String)value);
        }
        break;

      case UPDATE_COMMENT:
        if (value == null) {
          unsetUpdateComment();
        } else {
          setUpdateComment((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PIPELINE_ID:
        return getPipelineId();

      case PIPE_ID:
        return getPipeId();

      case OLD_STATUS:
        return getOldStatus();

      case NEW_STATUS:
        return getNewStatus();

      case OLD_EVENT:
        return getOldEvent();

      case UPDATE_COMMENT:
        return getUpdateComment();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PIPELINE_ID:
        return isSetPipelineId();
      case PIPE_ID:
        return isSetPipeId();
      case OLD_STATUS:
        return isSetOldStatus();
      case NEW_STATUS:
        return isSetNewStatus();
      case OLD_EVENT:
        return isSetOldEvent();
      case UPDATE_COMMENT:
        return isSetUpdateComment();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStatusOfEvent_args)
        return this.equals((updateStatusOfEvent_args)that);
      return false;
    }

    public boolean equals(updateStatusOfEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_pipelineId = true && this.isSetPipelineId();
      boolean that_present_pipelineId = true && that.isSetPipelineId();
      if (this_present_pipelineId || that_present_pipelineId) {
        if (!(this_present_pipelineId && that_present_pipelineId))
          return false;
        if (!this.pipelineId.equals(that.pipelineId))
          return false;
      }

      boolean this_present_pipeId = true && this.isSetPipeId();
      boolean that_present_pipeId = true && that.isSetPipeId();
      if (this_present_pipeId || that_present_pipeId) {
        if (!(this_present_pipeId && that_present_pipeId))
          return false;
        if (!this.pipeId.equals(that.pipeId))
          return false;
      }

      boolean this_present_oldStatus = true && this.isSetOldStatus();
      boolean that_present_oldStatus = true && that.isSetOldStatus();
      if (this_present_oldStatus || that_present_oldStatus) {
        if (!(this_present_oldStatus && that_present_oldStatus))
          return false;
        if (!this.oldStatus.equals(that.oldStatus))
          return false;
      }

      boolean this_present_newStatus = true && this.isSetNewStatus();
      boolean that_present_newStatus = true && that.isSetNewStatus();
      if (this_present_newStatus || that_present_newStatus) {
        if (!(this_present_newStatus && that_present_newStatus))
          return false;
        if (!this.newStatus.equals(that.newStatus))
          return false;
      }

      boolean this_present_oldEvent = true && this.isSetOldEvent();
      boolean that_present_oldEvent = true && that.isSetOldEvent();
      if (this_present_oldEvent || that_present_oldEvent) {
        if (!(this_present_oldEvent && that_present_oldEvent))
          return false;
        if (!this.oldEvent.equals(that.oldEvent))
          return false;
      }

      boolean this_present_updateComment = true && this.isSetUpdateComment();
      boolean that_present_updateComment = true && that.isSetUpdateComment();
      if (this_present_updateComment || that_present_updateComment) {
        if (!(this_present_updateComment && that_present_updateComment))
          return false;
        if (!this.updateComment.equals(that.updateComment))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateStatusOfEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPipelineId()).compareTo(other.isSetPipelineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPipelineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipelineId, other.pipelineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPipeId()).compareTo(other.isSetPipeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPipeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipeId, other.pipeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldStatus()).compareTo(other.isSetOldStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldStatus, other.oldStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewStatus()).compareTo(other.isSetNewStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newStatus, other.newStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldEvent()).compareTo(other.isSetOldEvent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldEvent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldEvent, other.oldEvent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpdateComment()).compareTo(other.isSetUpdateComment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateComment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateComment, other.updateComment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStatusOfEvent_args(");
      boolean first = true;

      sb.append("pipelineId:");
      if (this.pipelineId == null) {
        sb.append("null");
      } else {
        sb.append(this.pipelineId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pipeId:");
      if (this.pipeId == null) {
        sb.append("null");
      } else {
        sb.append(this.pipeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldStatus:");
      if (this.oldStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.oldStatus);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newStatus:");
      if (this.newStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.newStatus);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldEvent:");
      if (this.oldEvent == null) {
        sb.append("null");
      } else {
        sb.append(this.oldEvent);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("updateComment:");
      if (this.updateComment == null) {
        sb.append("null");
      } else {
        sb.append(this.updateComment);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStatusOfEvent_argsStandardSchemeFactory implements SchemeFactory {
      public updateStatusOfEvent_argsStandardScheme getScheme() {
        return new updateStatusOfEvent_argsStandardScheme();
      }
    }

    private static class updateStatusOfEvent_argsStandardScheme extends StandardScheme<updateStatusOfEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStatusOfEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PIPELINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pipelineId = iprot.readString();
                struct.setPipelineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PIPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pipeId = iprot.readString();
                struct.setPipeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OLD_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.oldStatus = ObjectStatus.findByValue(iprot.readI32());
                struct.setOldStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NEW_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newStatus = ObjectStatus.findByValue(iprot.readI32());
                struct.setNewStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OLD_EVENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.oldEvent = iprot.readString();
                struct.setOldEventIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // UPDATE_COMMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.updateComment = iprot.readString();
                struct.setUpdateCommentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStatusOfEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pipelineId != null) {
          oprot.writeFieldBegin(PIPELINE_ID_FIELD_DESC);
          oprot.writeString(struct.pipelineId);
          oprot.writeFieldEnd();
        }
        if (struct.pipeId != null) {
          oprot.writeFieldBegin(PIPE_ID_FIELD_DESC);
          oprot.writeString(struct.pipeId);
          oprot.writeFieldEnd();
        }
        if (struct.oldStatus != null) {
          oprot.writeFieldBegin(OLD_STATUS_FIELD_DESC);
          oprot.writeI32(struct.oldStatus.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.newStatus != null) {
          oprot.writeFieldBegin(NEW_STATUS_FIELD_DESC);
          oprot.writeI32(struct.newStatus.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.oldEvent != null) {
          oprot.writeFieldBegin(OLD_EVENT_FIELD_DESC);
          oprot.writeString(struct.oldEvent);
          oprot.writeFieldEnd();
        }
        if (struct.updateComment != null) {
          oprot.writeFieldBegin(UPDATE_COMMENT_FIELD_DESC);
          oprot.writeString(struct.updateComment);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStatusOfEvent_argsTupleSchemeFactory implements SchemeFactory {
      public updateStatusOfEvent_argsTupleScheme getScheme() {
        return new updateStatusOfEvent_argsTupleScheme();
      }
    }

    private static class updateStatusOfEvent_argsTupleScheme extends TupleScheme<updateStatusOfEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStatusOfEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPipelineId()) {
          optionals.set(0);
        }
        if (struct.isSetPipeId()) {
          optionals.set(1);
        }
        if (struct.isSetOldStatus()) {
          optionals.set(2);
        }
        if (struct.isSetNewStatus()) {
          optionals.set(3);
        }
        if (struct.isSetOldEvent()) {
          optionals.set(4);
        }
        if (struct.isSetUpdateComment()) {
          optionals.set(5);
        }
        if (struct.isSetToken()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetPipelineId()) {
          oprot.writeString(struct.pipelineId);
        }
        if (struct.isSetPipeId()) {
          oprot.writeString(struct.pipeId);
        }
        if (struct.isSetOldStatus()) {
          oprot.writeI32(struct.oldStatus.getValue());
        }
        if (struct.isSetNewStatus()) {
          oprot.writeI32(struct.newStatus.getValue());
        }
        if (struct.isSetOldEvent()) {
          oprot.writeString(struct.oldEvent);
        }
        if (struct.isSetUpdateComment()) {
          oprot.writeString(struct.updateComment);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStatusOfEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.pipelineId = iprot.readString();
          struct.setPipelineIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pipeId = iprot.readString();
          struct.setPipeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.oldStatus = ObjectStatus.findByValue(iprot.readI32());
          struct.setOldStatusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.newStatus = ObjectStatus.findByValue(iprot.readI32());
          struct.setNewStatusIsSet(true);
        }
        if (incoming.get(4)) {
          struct.oldEvent = iprot.readString();
          struct.setOldEventIsSet(true);
        }
        if (incoming.get(5)) {
          struct.updateComment = iprot.readString();
          struct.setUpdateCommentIsSet(true);
        }
        if (incoming.get(6)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class updateStatusOfEvent_result implements org.apache.thrift.TBase<updateStatusOfEvent_result, updateStatusOfEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateStatusOfEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStatusOfEvent_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStatusOfEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStatusOfEvent_resultTupleSchemeFactory());
    }

    public InvalidUpdateException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStatusOfEvent_result.class, metaDataMap);
    }

    public updateStatusOfEvent_result() {
    }

    public updateStatusOfEvent_result(
      InvalidUpdateException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStatusOfEvent_result(updateStatusOfEvent_result other) {
      if (other.isSetE()) {
        this.e = new InvalidUpdateException(other.e);
      }
    }

    public updateStatusOfEvent_result deepCopy() {
      return new updateStatusOfEvent_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public InvalidUpdateException getE() {
      return this.e;
    }

    public updateStatusOfEvent_result setE(InvalidUpdateException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((InvalidUpdateException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStatusOfEvent_result)
        return this.equals((updateStatusOfEvent_result)that);
      return false;
    }

    public boolean equals(updateStatusOfEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateStatusOfEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStatusOfEvent_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStatusOfEvent_resultStandardSchemeFactory implements SchemeFactory {
      public updateStatusOfEvent_resultStandardScheme getScheme() {
        return new updateStatusOfEvent_resultStandardScheme();
      }
    }

    private static class updateStatusOfEvent_resultStandardScheme extends StandardScheme<updateStatusOfEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStatusOfEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new InvalidUpdateException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStatusOfEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStatusOfEvent_resultTupleSchemeFactory implements SchemeFactory {
      public updateStatusOfEvent_resultTupleScheme getScheme() {
        return new updateStatusOfEvent_resultTupleScheme();
      }
    }

    private static class updateStatusOfEvent_resultTupleScheme extends TupleScheme<updateStatusOfEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStatusOfEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStatusOfEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new InvalidUpdateException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class deleteFromQuarantine_args implements org.apache.thrift.TBase<deleteFromQuarantine_args, deleteFromQuarantine_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFromQuarantine_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFromQuarantine_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFromQuarantine_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFromQuarantine_argsTupleSchemeFactory());
    }

    public List<String> ids; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      TOKEN((short)2, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFromQuarantine_args.class, metaDataMap);
    }

    public deleteFromQuarantine_args() {
    }

    public deleteFromQuarantine_args(
      List<String> ids,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.ids = ids;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFromQuarantine_args(deleteFromQuarantine_args other) {
      if (other.isSetIds()) {
        List<String> __this__ids = new ArrayList<String>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public deleteFromQuarantine_args deepCopy() {
      return new deleteFromQuarantine_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.token = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<String> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(String elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<String>();
      }
      this.ids.add(elem);
    }

    public List<String> getIds() {
      return this.ids;
    }

    public deleteFromQuarantine_args setIds(List<String> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public deleteFromQuarantine_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<String>)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFromQuarantine_args)
        return this.equals((deleteFromQuarantine_args)that);
      return false;
    }

    public boolean equals(deleteFromQuarantine_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteFromQuarantine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFromQuarantine_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFromQuarantine_argsStandardSchemeFactory implements SchemeFactory {
      public deleteFromQuarantine_argsStandardScheme getScheme() {
        return new deleteFromQuarantine_argsStandardScheme();
      }
    }

    private static class deleteFromQuarantine_argsStandardScheme extends StandardScheme<deleteFromQuarantine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFromQuarantine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list138 = iprot.readListBegin();
                  struct.ids = new ArrayList<String>(_list138.size);
                  for (int _i139 = 0; _i139 < _list138.size; ++_i139)
                  {
                    String _elem140;
                    _elem140 = iprot.readString();
                    struct.ids.add(_elem140);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFromQuarantine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ids.size()));
            for (String _iter141 : struct.ids)
            {
              oprot.writeString(_iter141);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFromQuarantine_argsTupleSchemeFactory implements SchemeFactory {
      public deleteFromQuarantine_argsTupleScheme getScheme() {
        return new deleteFromQuarantine_argsTupleScheme();
      }
    }

    private static class deleteFromQuarantine_argsTupleScheme extends TupleScheme<deleteFromQuarantine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFromQuarantine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetToken()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (String _iter142 : struct.ids)
            {
              oprot.writeString(_iter142);
            }
          }
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFromQuarantine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list143 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.ids = new ArrayList<String>(_list143.size);
            for (int _i144 = 0; _i144 < _list143.size; ++_i144)
            {
              String _elem145;
              _elem145 = iprot.readString();
              struct.ids.add(_elem145);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class deleteFromQuarantine_result implements org.apache.thrift.TBase<deleteFromQuarantine_result, deleteFromQuarantine_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFromQuarantine_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFromQuarantine_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFromQuarantine_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFromQuarantine_resultTupleSchemeFactory());
    }

    public ObjectNotQuarantinedException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFromQuarantine_result.class, metaDataMap);
    }

    public deleteFromQuarantine_result() {
    }

    public deleteFromQuarantine_result(
      ObjectNotQuarantinedException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFromQuarantine_result(deleteFromQuarantine_result other) {
      if (other.isSetE()) {
        this.e = new ObjectNotQuarantinedException(other.e);
      }
    }

    public deleteFromQuarantine_result deepCopy() {
      return new deleteFromQuarantine_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ObjectNotQuarantinedException getE() {
      return this.e;
    }

    public deleteFromQuarantine_result setE(ObjectNotQuarantinedException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ObjectNotQuarantinedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFromQuarantine_result)
        return this.equals((deleteFromQuarantine_result)that);
      return false;
    }

    public boolean equals(deleteFromQuarantine_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteFromQuarantine_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFromQuarantine_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFromQuarantine_resultStandardSchemeFactory implements SchemeFactory {
      public deleteFromQuarantine_resultStandardScheme getScheme() {
        return new deleteFromQuarantine_resultStandardScheme();
      }
    }

    private static class deleteFromQuarantine_resultStandardScheme extends StandardScheme<deleteFromQuarantine_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFromQuarantine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ObjectNotQuarantinedException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFromQuarantine_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFromQuarantine_resultTupleSchemeFactory implements SchemeFactory {
      public deleteFromQuarantine_resultTupleScheme getScheme() {
        return new deleteFromQuarantine_resultTupleScheme();
      }
    }

    private static class deleteFromQuarantine_resultTupleScheme extends TupleScheme<deleteFromQuarantine_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFromQuarantine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFromQuarantine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new ObjectNotQuarantinedException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class exportData_args implements org.apache.thrift.TBase<exportData_args, exportData_args._Fields>, java.io.Serializable, Cloneable, Comparable<exportData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportData_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportData_argsTupleSchemeFactory());
    }

    public List<String> ids; // required
    public String key; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      KEY((short)2, "key"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // KEY
            return KEY;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportData_args.class, metaDataMap);
    }

    public exportData_args() {
    }

    public exportData_args(
      List<String> ids,
      String key,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.ids = ids;
      this.key = key;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportData_args(exportData_args other) {
      if (other.isSetIds()) {
        List<String> __this__ids = new ArrayList<String>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public exportData_args deepCopy() {
      return new exportData_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.key = null;
      this.token = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<String> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(String elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<String>();
      }
      this.ids.add(elem);
    }

    public List<String> getIds() {
      return this.ids;
    }

    public exportData_args setIds(List<String> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public exportData_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public exportData_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<String>)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case KEY:
        return getKey();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case KEY:
        return isSetKey();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportData_args)
        return this.equals((exportData_args)that);
      return false;
    }

    public boolean equals(exportData_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(exportData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportData_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportData_argsStandardSchemeFactory implements SchemeFactory {
      public exportData_argsStandardScheme getScheme() {
        return new exportData_argsStandardScheme();
      }
    }

    private static class exportData_argsStandardScheme extends StandardScheme<exportData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                  struct.ids = new ArrayList<String>(_list146.size);
                  for (int _i147 = 0; _i147 < _list146.size; ++_i147)
                  {
                    String _elem148;
                    _elem148 = iprot.readString();
                    struct.ids.add(_elem148);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ids.size()));
            for (String _iter149 : struct.ids)
            {
              oprot.writeString(_iter149);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportData_argsTupleSchemeFactory implements SchemeFactory {
      public exportData_argsTupleScheme getScheme() {
        return new exportData_argsTupleScheme();
      }
    }

    private static class exportData_argsTupleScheme extends TupleScheme<exportData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetKey()) {
          optionals.set(1);
        }
        if (struct.isSetToken()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (String _iter150 : struct.ids)
            {
              oprot.writeString(_iter150);
            }
          }
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list151 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.ids = new ArrayList<String>(_list151.size);
            for (int _i152 = 0; _i152 < _list151.size; ++_i152)
            {
              String _elem153;
              _elem153 = iprot.readString();
              struct.ids.add(_elem153);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class exportData_result implements org.apache.thrift.TBase<exportData_result, exportData_result._Fields>, java.io.Serializable, Cloneable, Comparable<exportData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportData_resultTupleSchemeFactory());
    }

    public ByteBuffer success; // required
    public ObjectNotQuarantinedException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportData_result.class, metaDataMap);
    }

    public exportData_result() {
    }

    public exportData_result(
      ByteBuffer success,
      ObjectNotQuarantinedException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportData_result(exportData_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
;
      }
      if (other.isSetE()) {
        this.e = new ObjectNotQuarantinedException(other.e);
      }
    }

    public exportData_result deepCopy() {
      return new exportData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public exportData_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public exportData_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ObjectNotQuarantinedException getE() {
      return this.e;
    }

    public exportData_result setE(ObjectNotQuarantinedException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ObjectNotQuarantinedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportData_result)
        return this.equals((exportData_result)that);
      return false;
    }

    public boolean equals(exportData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(exportData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportData_resultStandardSchemeFactory implements SchemeFactory {
      public exportData_resultStandardScheme getScheme() {
        return new exportData_resultStandardScheme();
      }
    }

    private static class exportData_resultStandardScheme extends StandardScheme<exportData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ObjectNotQuarantinedException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportData_resultTupleSchemeFactory implements SchemeFactory {
      public exportData_resultTupleScheme getScheme() {
        return new exportData_resultTupleScheme();
      }
    }

    private static class exportData_resultTupleScheme extends TupleScheme<exportData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ObjectNotQuarantinedException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class importData_args implements org.apache.thrift.TBase<importData_args, importData_args._Fields>, java.io.Serializable, Cloneable, Comparable<importData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("importData_args");

    private static final org.apache.thrift.protocol.TField DATA_TO_IMPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("dataToImport", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new importData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new importData_argsTupleSchemeFactory());
    }

    public ByteBuffer dataToImport; // required
    public String key; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA_TO_IMPORT((short)1, "dataToImport"),
      KEY((short)2, "key"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA_TO_IMPORT
            return DATA_TO_IMPORT;
          case 2: // KEY
            return KEY;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA_TO_IMPORT, new org.apache.thrift.meta_data.FieldMetaData("dataToImport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(importData_args.class, metaDataMap);
    }

    public importData_args() {
    }

    public importData_args(
      ByteBuffer dataToImport,
      String key,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.dataToImport = dataToImport;
      this.key = key;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public importData_args(importData_args other) {
      if (other.isSetDataToImport()) {
        this.dataToImport = org.apache.thrift.TBaseHelper.copyBinary(other.dataToImport);
;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public importData_args deepCopy() {
      return new importData_args(this);
    }

    @Override
    public void clear() {
      this.dataToImport = null;
      this.key = null;
      this.token = null;
    }

    public byte[] getDataToImport() {
      setDataToImport(org.apache.thrift.TBaseHelper.rightSize(dataToImport));
      return dataToImport == null ? null : dataToImport.array();
    }

    public ByteBuffer bufferForDataToImport() {
      return dataToImport;
    }

    public importData_args setDataToImport(byte[] dataToImport) {
      setDataToImport(dataToImport == null ? (ByteBuffer)null : ByteBuffer.wrap(dataToImport));
      return this;
    }

    public importData_args setDataToImport(ByteBuffer dataToImport) {
      this.dataToImport = dataToImport;
      return this;
    }

    public void unsetDataToImport() {
      this.dataToImport = null;
    }

    /** Returns true if field dataToImport is set (has been assigned a value) and false otherwise */
    public boolean isSetDataToImport() {
      return this.dataToImport != null;
    }

    public void setDataToImportIsSet(boolean value) {
      if (!value) {
        this.dataToImport = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public importData_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public importData_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA_TO_IMPORT:
        if (value == null) {
          unsetDataToImport();
        } else {
          setDataToImport((ByteBuffer)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA_TO_IMPORT:
        return getDataToImport();

      case KEY:
        return getKey();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA_TO_IMPORT:
        return isSetDataToImport();
      case KEY:
        return isSetKey();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof importData_args)
        return this.equals((importData_args)that);
      return false;
    }

    public boolean equals(importData_args that) {
      if (that == null)
        return false;

      boolean this_present_dataToImport = true && this.isSetDataToImport();
      boolean that_present_dataToImport = true && that.isSetDataToImport();
      if (this_present_dataToImport || that_present_dataToImport) {
        if (!(this_present_dataToImport && that_present_dataToImport))
          return false;
        if (!this.dataToImport.equals(that.dataToImport))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(importData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDataToImport()).compareTo(other.isSetDataToImport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataToImport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataToImport, other.dataToImport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("importData_args(");
      boolean first = true;

      sb.append("dataToImport:");
      if (this.dataToImport == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.dataToImport, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class importData_argsStandardSchemeFactory implements SchemeFactory {
      public importData_argsStandardScheme getScheme() {
        return new importData_argsStandardScheme();
      }
    }

    private static class importData_argsStandardScheme extends StandardScheme<importData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, importData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA_TO_IMPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataToImport = iprot.readBinary();
                struct.setDataToImportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, importData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dataToImport != null) {
          oprot.writeFieldBegin(DATA_TO_IMPORT_FIELD_DESC);
          oprot.writeBinary(struct.dataToImport);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class importData_argsTupleSchemeFactory implements SchemeFactory {
      public importData_argsTupleScheme getScheme() {
        return new importData_argsTupleScheme();
      }
    }

    private static class importData_argsTupleScheme extends TupleScheme<importData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, importData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDataToImport()) {
          optionals.set(0);
        }
        if (struct.isSetKey()) {
          optionals.set(1);
        }
        if (struct.isSetToken()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDataToImport()) {
          oprot.writeBinary(struct.dataToImport);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, importData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.dataToImport = iprot.readBinary();
          struct.setDataToImportIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class importData_result implements org.apache.thrift.TBase<importData_result, importData_result._Fields>, java.io.Serializable, Cloneable, Comparable<importData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("importData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new importData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new importData_resultTupleSchemeFactory());
    }

    public ImportResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ImportResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(importData_result.class, metaDataMap);
    }

    public importData_result() {
    }

    public importData_result(
      ImportResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public importData_result(importData_result other) {
      if (other.isSetSuccess()) {
        this.success = new ImportResult(other.success);
      }
    }

    public importData_result deepCopy() {
      return new importData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ImportResult getSuccess() {
      return this.success;
    }

    public importData_result setSuccess(ImportResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ImportResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof importData_result)
        return this.equals((importData_result)that);
      return false;
    }

    public boolean equals(importData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(importData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("importData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class importData_resultStandardSchemeFactory implements SchemeFactory {
      public importData_resultStandardScheme getScheme() {
        return new importData_resultStandardScheme();
      }
    }

    private static class importData_resultStandardScheme extends StandardScheme<importData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, importData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ImportResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, importData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class importData_resultTupleSchemeFactory implements SchemeFactory {
      public importData_resultTupleScheme getScheme() {
        return new importData_resultTupleScheme();
      }
    }

    private static class importData_resultTupleScheme extends TupleScheme<importData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, importData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, importData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ImportResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteObjectsByEvent_args implements org.apache.thrift.TBase<deleteObjectsByEvent_args, deleteObjectsByEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteObjectsByEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteObjectsByEvent_args");

    private static final org.apache.thrift.protocol.TField PIPELINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipelineId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PIPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipeId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField EVENT_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("eventText", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteObjectsByEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteObjectsByEvent_argsTupleSchemeFactory());
    }

    public String pipelineId; // required
    public String pipeId; // required
    /**
     * 
     * @see ObjectStatus
     */
    public ObjectStatus status; // required
    public String eventText; // required
    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PIPELINE_ID((short)1, "pipelineId"),
      PIPE_ID((short)2, "pipeId"),
      /**
       * 
       * @see ObjectStatus
       */
      STATUS((short)3, "status"),
      EVENT_TEXT((short)4, "eventText"),
      TOKEN((short)5, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PIPELINE_ID
            return PIPELINE_ID;
          case 2: // PIPE_ID
            return PIPE_ID;
          case 3: // STATUS
            return STATUS;
          case 4: // EVENT_TEXT
            return EVENT_TEXT;
          case 5: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PIPELINE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipelineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PIPE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ObjectStatus.class)));
      tmpMap.put(_Fields.EVENT_TEXT, new org.apache.thrift.meta_data.FieldMetaData("eventText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteObjectsByEvent_args.class, metaDataMap);
    }

    public deleteObjectsByEvent_args() {
    }

    public deleteObjectsByEvent_args(
      String pipelineId,
      String pipeId,
      ObjectStatus status,
      String eventText,
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.pipelineId = pipelineId;
      this.pipeId = pipeId;
      this.status = status;
      this.eventText = eventText;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteObjectsByEvent_args(deleteObjectsByEvent_args other) {
      if (other.isSetPipelineId()) {
        this.pipelineId = other.pipelineId;
      }
      if (other.isSetPipeId()) {
        this.pipeId = other.pipeId;
      }
      if (other.isSetStatus()) {
        this.status = other.status;
      }
      if (other.isSetEventText()) {
        this.eventText = other.eventText;
      }
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public deleteObjectsByEvent_args deepCopy() {
      return new deleteObjectsByEvent_args(this);
    }

    @Override
    public void clear() {
      this.pipelineId = null;
      this.pipeId = null;
      this.status = null;
      this.eventText = null;
      this.token = null;
    }

    public String getPipelineId() {
      return this.pipelineId;
    }

    public deleteObjectsByEvent_args setPipelineId(String pipelineId) {
      this.pipelineId = pipelineId;
      return this;
    }

    public void unsetPipelineId() {
      this.pipelineId = null;
    }

    /** Returns true if field pipelineId is set (has been assigned a value) and false otherwise */
    public boolean isSetPipelineId() {
      return this.pipelineId != null;
    }

    public void setPipelineIdIsSet(boolean value) {
      if (!value) {
        this.pipelineId = null;
      }
    }

    public String getPipeId() {
      return this.pipeId;
    }

    public deleteObjectsByEvent_args setPipeId(String pipeId) {
      this.pipeId = pipeId;
      return this;
    }

    public void unsetPipeId() {
      this.pipeId = null;
    }

    /** Returns true if field pipeId is set (has been assigned a value) and false otherwise */
    public boolean isSetPipeId() {
      return this.pipeId != null;
    }

    public void setPipeIdIsSet(boolean value) {
      if (!value) {
        this.pipeId = null;
      }
    }

    /**
     * 
     * @see ObjectStatus
     */
    public ObjectStatus getStatus() {
      return this.status;
    }

    /**
     * 
     * @see ObjectStatus
     */
    public deleteObjectsByEvent_args setStatus(ObjectStatus status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public String getEventText() {
      return this.eventText;
    }

    public deleteObjectsByEvent_args setEventText(String eventText) {
      this.eventText = eventText;
      return this;
    }

    public void unsetEventText() {
      this.eventText = null;
    }

    /** Returns true if field eventText is set (has been assigned a value) and false otherwise */
    public boolean isSetEventText() {
      return this.eventText != null;
    }

    public void setEventTextIsSet(boolean value) {
      if (!value) {
        this.eventText = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public deleteObjectsByEvent_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PIPELINE_ID:
        if (value == null) {
          unsetPipelineId();
        } else {
          setPipelineId((String)value);
        }
        break;

      case PIPE_ID:
        if (value == null) {
          unsetPipeId();
        } else {
          setPipeId((String)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((ObjectStatus)value);
        }
        break;

      case EVENT_TEXT:
        if (value == null) {
          unsetEventText();
        } else {
          setEventText((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PIPELINE_ID:
        return getPipelineId();

      case PIPE_ID:
        return getPipeId();

      case STATUS:
        return getStatus();

      case EVENT_TEXT:
        return getEventText();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PIPELINE_ID:
        return isSetPipelineId();
      case PIPE_ID:
        return isSetPipeId();
      case STATUS:
        return isSetStatus();
      case EVENT_TEXT:
        return isSetEventText();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteObjectsByEvent_args)
        return this.equals((deleteObjectsByEvent_args)that);
      return false;
    }

    public boolean equals(deleteObjectsByEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_pipelineId = true && this.isSetPipelineId();
      boolean that_present_pipelineId = true && that.isSetPipelineId();
      if (this_present_pipelineId || that_present_pipelineId) {
        if (!(this_present_pipelineId && that_present_pipelineId))
          return false;
        if (!this.pipelineId.equals(that.pipelineId))
          return false;
      }

      boolean this_present_pipeId = true && this.isSetPipeId();
      boolean that_present_pipeId = true && that.isSetPipeId();
      if (this_present_pipeId || that_present_pipeId) {
        if (!(this_present_pipeId && that_present_pipeId))
          return false;
        if (!this.pipeId.equals(that.pipeId))
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      boolean this_present_eventText = true && this.isSetEventText();
      boolean that_present_eventText = true && that.isSetEventText();
      if (this_present_eventText || that_present_eventText) {
        if (!(this_present_eventText && that_present_eventText))
          return false;
        if (!this.eventText.equals(that.eventText))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteObjectsByEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPipelineId()).compareTo(other.isSetPipelineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPipelineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipelineId, other.pipelineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPipeId()).compareTo(other.isSetPipeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPipeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipeId, other.pipeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEventText()).compareTo(other.isSetEventText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventText, other.eventText);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteObjectsByEvent_args(");
      boolean first = true;

      sb.append("pipelineId:");
      if (this.pipelineId == null) {
        sb.append("null");
      } else {
        sb.append(this.pipelineId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pipeId:");
      if (this.pipeId == null) {
        sb.append("null");
      } else {
        sb.append(this.pipeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eventText:");
      if (this.eventText == null) {
        sb.append("null");
      } else {
        sb.append(this.eventText);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteObjectsByEvent_argsStandardSchemeFactory implements SchemeFactory {
      public deleteObjectsByEvent_argsStandardScheme getScheme() {
        return new deleteObjectsByEvent_argsStandardScheme();
      }
    }

    private static class deleteObjectsByEvent_argsStandardScheme extends StandardScheme<deleteObjectsByEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteObjectsByEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PIPELINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pipelineId = iprot.readString();
                struct.setPipelineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PIPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pipeId = iprot.readString();
                struct.setPipeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = ObjectStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EVENT_TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.eventText = iprot.readString();
                struct.setEventTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteObjectsByEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pipelineId != null) {
          oprot.writeFieldBegin(PIPELINE_ID_FIELD_DESC);
          oprot.writeString(struct.pipelineId);
          oprot.writeFieldEnd();
        }
        if (struct.pipeId != null) {
          oprot.writeFieldBegin(PIPE_ID_FIELD_DESC);
          oprot.writeString(struct.pipeId);
          oprot.writeFieldEnd();
        }
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.eventText != null) {
          oprot.writeFieldBegin(EVENT_TEXT_FIELD_DESC);
          oprot.writeString(struct.eventText);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteObjectsByEvent_argsTupleSchemeFactory implements SchemeFactory {
      public deleteObjectsByEvent_argsTupleScheme getScheme() {
        return new deleteObjectsByEvent_argsTupleScheme();
      }
    }

    private static class deleteObjectsByEvent_argsTupleScheme extends TupleScheme<deleteObjectsByEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteObjectsByEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPipelineId()) {
          optionals.set(0);
        }
        if (struct.isSetPipeId()) {
          optionals.set(1);
        }
        if (struct.isSetStatus()) {
          optionals.set(2);
        }
        if (struct.isSetEventText()) {
          optionals.set(3);
        }
        if (struct.isSetToken()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetPipelineId()) {
          oprot.writeString(struct.pipelineId);
        }
        if (struct.isSetPipeId()) {
          oprot.writeString(struct.pipeId);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status.getValue());
        }
        if (struct.isSetEventText()) {
          oprot.writeString(struct.eventText);
        }
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteObjectsByEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.pipelineId = iprot.readString();
          struct.setPipelineIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pipeId = iprot.readString();
          struct.setPipeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.status = ObjectStatus.findByValue(iprot.readI32());
          struct.setStatusIsSet(true);
        }
        if (incoming.get(3)) {
          struct.eventText = iprot.readString();
          struct.setEventTextIsSet(true);
        }
        if (incoming.get(4)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class deleteObjectsByEvent_result implements org.apache.thrift.TBase<deleteObjectsByEvent_result, deleteObjectsByEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteObjectsByEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteObjectsByEvent_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteObjectsByEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteObjectsByEvent_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteObjectsByEvent_result.class, metaDataMap);
    }

    public deleteObjectsByEvent_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteObjectsByEvent_result(deleteObjectsByEvent_result other) {
    }

    public deleteObjectsByEvent_result deepCopy() {
      return new deleteObjectsByEvent_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteObjectsByEvent_result)
        return this.equals((deleteObjectsByEvent_result)that);
      return false;
    }

    public boolean equals(deleteObjectsByEvent_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteObjectsByEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteObjectsByEvent_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteObjectsByEvent_resultStandardSchemeFactory implements SchemeFactory {
      public deleteObjectsByEvent_resultStandardScheme getScheme() {
        return new deleteObjectsByEvent_resultStandardScheme();
      }
    }

    private static class deleteObjectsByEvent_resultStandardScheme extends StandardScheme<deleteObjectsByEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteObjectsByEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteObjectsByEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteObjectsByEvent_resultTupleSchemeFactory implements SchemeFactory {
      public deleteObjectsByEvent_resultTupleScheme getScheme() {
        return new deleteObjectsByEvent_resultTupleScheme();
      }
    }

    private static class deleteObjectsByEvent_resultTupleScheme extends TupleScheme<deleteObjectsByEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteObjectsByEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteObjectsByEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getPipelinesForUser_args implements org.apache.thrift.TBase<getPipelinesForUser_args, getPipelinesForUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPipelinesForUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPipelinesForUser_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPipelinesForUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPipelinesForUser_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPipelinesForUser_args.class, metaDataMap);
    }

    public getPipelinesForUser_args() {
    }

    public getPipelinesForUser_args(
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPipelinesForUser_args(getPipelinesForUser_args other) {
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public getPipelinesForUser_args deepCopy() {
      return new getPipelinesForUser_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public getPipelinesForUser_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPipelinesForUser_args)
        return this.equals((getPipelinesForUser_args)that);
      return false;
    }

    public boolean equals(getPipelinesForUser_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPipelinesForUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPipelinesForUser_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPipelinesForUser_argsStandardSchemeFactory implements SchemeFactory {
      public getPipelinesForUser_argsStandardScheme getScheme() {
        return new getPipelinesForUser_argsStandardScheme();
      }
    }

    private static class getPipelinesForUser_argsStandardScheme extends StandardScheme<getPipelinesForUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPipelinesForUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPipelinesForUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPipelinesForUser_argsTupleSchemeFactory implements SchemeFactory {
      public getPipelinesForUser_argsTupleScheme getScheme() {
        return new getPipelinesForUser_argsTupleScheme();
      }
    }

    private static class getPipelinesForUser_argsTupleScheme extends TupleScheme<getPipelinesForUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPipelinesForUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetToken()) {
          struct.token.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPipelinesForUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.token = new ezbake.base.thrift.EzSecurityToken();
          struct.token.read(iprot);
          struct.setTokenIsSet(true);
        }
      }
    }

  }

  public static class getPipelinesForUser_result implements org.apache.thrift.TBase<getPipelinesForUser_result, getPipelinesForUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPipelinesForUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPipelinesForUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPipelinesForUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPipelinesForUser_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPipelinesForUser_result.class, metaDataMap);
    }

    public getPipelinesForUser_result() {
    }

    public getPipelinesForUser_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPipelinesForUser_result(getPipelinesForUser_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getPipelinesForUser_result deepCopy() {
      return new getPipelinesForUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getPipelinesForUser_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPipelinesForUser_result)
        return this.equals((getPipelinesForUser_result)that);
      return false;
    }

    public boolean equals(getPipelinesForUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getPipelinesForUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPipelinesForUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPipelinesForUser_resultStandardSchemeFactory implements SchemeFactory {
      public getPipelinesForUser_resultStandardScheme getScheme() {
        return new getPipelinesForUser_resultStandardScheme();
      }
    }

    private static class getPipelinesForUser_resultStandardScheme extends StandardScheme<getPipelinesForUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPipelinesForUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list154 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list154.size);
                  for (int _i155 = 0; _i155 < _list154.size; ++_i155)
                  {
                    String _elem156;
                    _elem156 = iprot.readString();
                    struct.success.add(_elem156);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPipelinesForUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter157 : struct.success)
            {
              oprot.writeString(_iter157);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPipelinesForUser_resultTupleSchemeFactory implements SchemeFactory {
      public getPipelinesForUser_resultTupleScheme getScheme() {
        return new getPipelinesForUser_resultTupleScheme();
      }
    }

    private static class getPipelinesForUser_resultTupleScheme extends TupleScheme<getPipelinesForUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPipelinesForUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter158 : struct.success)
            {
              oprot.writeString(_iter158);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPipelinesForUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list159 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list159.size);
            for (int _i160 = 0; _i160 < _list159.size; ++_i160)
            {
              String _elem161;
              _elem161 = iprot.readString();
              struct.success.add(_elem161);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
