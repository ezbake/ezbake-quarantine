/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.quarantine.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This struct contains encrypted data that has been exported from an instance of Quarantine. It is to be imported
 * into another instance of Quarantine for testing/debugging purposes.
 */
public class ExportedData implements org.apache.thrift.TBase<ExportedData, ExportedData._Fields>, java.io.Serializable, Cloneable, Comparable<ExportedData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExportedData");

  private static final org.apache.thrift.protocol.TField SALT_FIELD_DESC = new org.apache.thrift.protocol.TField("salt", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INITIALIZATION_VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("initializationVector", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ENCRYPTED_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("encryptedContent", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExportedDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExportedDataTupleSchemeFactory());
  }

  public ByteBuffer salt; // optional
  public ByteBuffer initializationVector; // optional
  public ByteBuffer encryptedContent; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SALT((short)1, "salt"),
    INITIALIZATION_VECTOR((short)2, "initializationVector"),
    ENCRYPTED_CONTENT((short)3, "encryptedContent");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SALT
          return SALT;
        case 2: // INITIALIZATION_VECTOR
          return INITIALIZATION_VECTOR;
        case 3: // ENCRYPTED_CONTENT
          return ENCRYPTED_CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.SALT,_Fields.INITIALIZATION_VECTOR,_Fields.ENCRYPTED_CONTENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SALT, new org.apache.thrift.meta_data.FieldMetaData("salt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.INITIALIZATION_VECTOR, new org.apache.thrift.meta_data.FieldMetaData("initializationVector", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ENCRYPTED_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("encryptedContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExportedData.class, metaDataMap);
  }

  public ExportedData() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExportedData(ExportedData other) {
    if (other.isSetSalt()) {
      this.salt = org.apache.thrift.TBaseHelper.copyBinary(other.salt);
;
    }
    if (other.isSetInitializationVector()) {
      this.initializationVector = org.apache.thrift.TBaseHelper.copyBinary(other.initializationVector);
;
    }
    if (other.isSetEncryptedContent()) {
      this.encryptedContent = org.apache.thrift.TBaseHelper.copyBinary(other.encryptedContent);
;
    }
  }

  public ExportedData deepCopy() {
    return new ExportedData(this);
  }

  @Override
  public void clear() {
    this.salt = null;
    this.initializationVector = null;
    this.encryptedContent = null;
  }

  public byte[] getSalt() {
    setSalt(org.apache.thrift.TBaseHelper.rightSize(salt));
    return salt == null ? null : salt.array();
  }

  public ByteBuffer bufferForSalt() {
    return salt;
  }

  public ExportedData setSalt(byte[] salt) {
    setSalt(salt == null ? (ByteBuffer)null : ByteBuffer.wrap(salt));
    return this;
  }

  public ExportedData setSalt(ByteBuffer salt) {
    this.salt = salt;
    return this;
  }

  public void unsetSalt() {
    this.salt = null;
  }

  /** Returns true if field salt is set (has been assigned a value) and false otherwise */
  public boolean isSetSalt() {
    return this.salt != null;
  }

  public void setSaltIsSet(boolean value) {
    if (!value) {
      this.salt = null;
    }
  }

  public byte[] getInitializationVector() {
    setInitializationVector(org.apache.thrift.TBaseHelper.rightSize(initializationVector));
    return initializationVector == null ? null : initializationVector.array();
  }

  public ByteBuffer bufferForInitializationVector() {
    return initializationVector;
  }

  public ExportedData setInitializationVector(byte[] initializationVector) {
    setInitializationVector(initializationVector == null ? (ByteBuffer)null : ByteBuffer.wrap(initializationVector));
    return this;
  }

  public ExportedData setInitializationVector(ByteBuffer initializationVector) {
    this.initializationVector = initializationVector;
    return this;
  }

  public void unsetInitializationVector() {
    this.initializationVector = null;
  }

  /** Returns true if field initializationVector is set (has been assigned a value) and false otherwise */
  public boolean isSetInitializationVector() {
    return this.initializationVector != null;
  }

  public void setInitializationVectorIsSet(boolean value) {
    if (!value) {
      this.initializationVector = null;
    }
  }

  public byte[] getEncryptedContent() {
    setEncryptedContent(org.apache.thrift.TBaseHelper.rightSize(encryptedContent));
    return encryptedContent == null ? null : encryptedContent.array();
  }

  public ByteBuffer bufferForEncryptedContent() {
    return encryptedContent;
  }

  public ExportedData setEncryptedContent(byte[] encryptedContent) {
    setEncryptedContent(encryptedContent == null ? (ByteBuffer)null : ByteBuffer.wrap(encryptedContent));
    return this;
  }

  public ExportedData setEncryptedContent(ByteBuffer encryptedContent) {
    this.encryptedContent = encryptedContent;
    return this;
  }

  public void unsetEncryptedContent() {
    this.encryptedContent = null;
  }

  /** Returns true if field encryptedContent is set (has been assigned a value) and false otherwise */
  public boolean isSetEncryptedContent() {
    return this.encryptedContent != null;
  }

  public void setEncryptedContentIsSet(boolean value) {
    if (!value) {
      this.encryptedContent = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SALT:
      if (value == null) {
        unsetSalt();
      } else {
        setSalt((ByteBuffer)value);
      }
      break;

    case INITIALIZATION_VECTOR:
      if (value == null) {
        unsetInitializationVector();
      } else {
        setInitializationVector((ByteBuffer)value);
      }
      break;

    case ENCRYPTED_CONTENT:
      if (value == null) {
        unsetEncryptedContent();
      } else {
        setEncryptedContent((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SALT:
      return getSalt();

    case INITIALIZATION_VECTOR:
      return getInitializationVector();

    case ENCRYPTED_CONTENT:
      return getEncryptedContent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SALT:
      return isSetSalt();
    case INITIALIZATION_VECTOR:
      return isSetInitializationVector();
    case ENCRYPTED_CONTENT:
      return isSetEncryptedContent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExportedData)
      return this.equals((ExportedData)that);
    return false;
  }

  public boolean equals(ExportedData that) {
    if (that == null)
      return false;

    boolean this_present_salt = true && this.isSetSalt();
    boolean that_present_salt = true && that.isSetSalt();
    if (this_present_salt || that_present_salt) {
      if (!(this_present_salt && that_present_salt))
        return false;
      if (!this.salt.equals(that.salt))
        return false;
    }

    boolean this_present_initializationVector = true && this.isSetInitializationVector();
    boolean that_present_initializationVector = true && that.isSetInitializationVector();
    if (this_present_initializationVector || that_present_initializationVector) {
      if (!(this_present_initializationVector && that_present_initializationVector))
        return false;
      if (!this.initializationVector.equals(that.initializationVector))
        return false;
    }

    boolean this_present_encryptedContent = true && this.isSetEncryptedContent();
    boolean that_present_encryptedContent = true && that.isSetEncryptedContent();
    if (this_present_encryptedContent || that_present_encryptedContent) {
      if (!(this_present_encryptedContent && that_present_encryptedContent))
        return false;
      if (!this.encryptedContent.equals(that.encryptedContent))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ExportedData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSalt()).compareTo(other.isSetSalt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salt, other.salt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInitializationVector()).compareTo(other.isSetInitializationVector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitializationVector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initializationVector, other.initializationVector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEncryptedContent()).compareTo(other.isSetEncryptedContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncryptedContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryptedContent, other.encryptedContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExportedData(");
    boolean first = true;

    if (isSetSalt()) {
      sb.append("salt:");
      if (this.salt == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.salt, sb);
      }
      first = false;
    }
    if (isSetInitializationVector()) {
      if (!first) sb.append(", ");
      sb.append("initializationVector:");
      if (this.initializationVector == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.initializationVector, sb);
      }
      first = false;
    }
    if (isSetEncryptedContent()) {
      if (!first) sb.append(", ");
      sb.append("encryptedContent:");
      if (this.encryptedContent == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.encryptedContent, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExportedDataStandardSchemeFactory implements SchemeFactory {
    public ExportedDataStandardScheme getScheme() {
      return new ExportedDataStandardScheme();
    }
  }

  private static class ExportedDataStandardScheme extends StandardScheme<ExportedData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExportedData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SALT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.salt = iprot.readBinary();
              struct.setSaltIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INITIALIZATION_VECTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.initializationVector = iprot.readBinary();
              struct.setInitializationVectorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENCRYPTED_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.encryptedContent = iprot.readBinary();
              struct.setEncryptedContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExportedData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.salt != null) {
        if (struct.isSetSalt()) {
          oprot.writeFieldBegin(SALT_FIELD_DESC);
          oprot.writeBinary(struct.salt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.initializationVector != null) {
        if (struct.isSetInitializationVector()) {
          oprot.writeFieldBegin(INITIALIZATION_VECTOR_FIELD_DESC);
          oprot.writeBinary(struct.initializationVector);
          oprot.writeFieldEnd();
        }
      }
      if (struct.encryptedContent != null) {
        if (struct.isSetEncryptedContent()) {
          oprot.writeFieldBegin(ENCRYPTED_CONTENT_FIELD_DESC);
          oprot.writeBinary(struct.encryptedContent);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExportedDataTupleSchemeFactory implements SchemeFactory {
    public ExportedDataTupleScheme getScheme() {
      return new ExportedDataTupleScheme();
    }
  }

  private static class ExportedDataTupleScheme extends TupleScheme<ExportedData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExportedData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSalt()) {
        optionals.set(0);
      }
      if (struct.isSetInitializationVector()) {
        optionals.set(1);
      }
      if (struct.isSetEncryptedContent()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSalt()) {
        oprot.writeBinary(struct.salt);
      }
      if (struct.isSetInitializationVector()) {
        oprot.writeBinary(struct.initializationVector);
      }
      if (struct.isSetEncryptedContent()) {
        oprot.writeBinary(struct.encryptedContent);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExportedData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.salt = iprot.readBinary();
        struct.setSaltIsSet(true);
      }
      if (incoming.get(1)) {
        struct.initializationVector = iprot.readBinary();
        struct.setInitializationVectorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.encryptedContent = iprot.readBinary();
        struct.setEncryptedContentIsSet(true);
      }
    }
  }

}

