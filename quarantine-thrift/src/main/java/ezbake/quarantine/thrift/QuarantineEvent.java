/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.quarantine.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This struct represents a particular time that the object was placed into quarantine. The timestamp
 * represents the most recent time that the object was quarantined with the given error message.
 * 
 * TODO add more docs here
 */
public class QuarantineEvent implements org.apache.thrift.TBase<QuarantineEvent, QuarantineEvent._Fields>, java.io.Serializable, Cloneable, Comparable<QuarantineEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuarantineEvent");

  private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PIPELINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipelineId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PIPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipeId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ADDITIONAL_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("additionalMetadata", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QuarantineEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QuarantineEventTupleSchemeFactory());
  }

  public String event; // optional
  /**
   * 
   * @see EventType
   */
  public EventType type; // optional
  public long timestamp; // optional
  public String id; // optional
  public String pipelineId; // optional
  public String pipeId; // optional
  public AdditionalMetadata additionalMetadata; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EVENT((short)1, "event"),
    /**
     * 
     * @see EventType
     */
    TYPE((short)2, "type"),
    TIMESTAMP((short)3, "timestamp"),
    ID((short)4, "id"),
    PIPELINE_ID((short)5, "pipelineId"),
    PIPE_ID((short)6, "pipeId"),
    ADDITIONAL_METADATA((short)7, "additionalMetadata");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EVENT
          return EVENT;
        case 2: // TYPE
          return TYPE;
        case 3: // TIMESTAMP
          return TIMESTAMP;
        case 4: // ID
          return ID;
        case 5: // PIPELINE_ID
          return PIPELINE_ID;
        case 6: // PIPE_ID
          return PIPE_ID;
        case 7: // ADDITIONAL_METADATA
          return ADDITIONAL_METADATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.EVENT,_Fields.TYPE,_Fields.TIMESTAMP,_Fields.ID,_Fields.PIPELINE_ID,_Fields.PIPE_ID,_Fields.ADDITIONAL_METADATA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("event", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EventType.class)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PIPELINE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipelineId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PIPE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDITIONAL_METADATA, new org.apache.thrift.meta_data.FieldMetaData("additionalMetadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AdditionalMetadata.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuarantineEvent.class, metaDataMap);
  }

  public QuarantineEvent() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QuarantineEvent(QuarantineEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetEvent()) {
      this.event = other.event;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.timestamp = other.timestamp;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetPipelineId()) {
      this.pipelineId = other.pipelineId;
    }
    if (other.isSetPipeId()) {
      this.pipeId = other.pipeId;
    }
    if (other.isSetAdditionalMetadata()) {
      this.additionalMetadata = new AdditionalMetadata(other.additionalMetadata);
    }
  }

  public QuarantineEvent deepCopy() {
    return new QuarantineEvent(this);
  }

  @Override
  public void clear() {
    this.event = null;
    this.type = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.id = null;
    this.pipelineId = null;
    this.pipeId = null;
    this.additionalMetadata = null;
  }

  public String getEvent() {
    return this.event;
  }

  public QuarantineEvent setEvent(String event) {
    this.event = event;
    return this;
  }

  public void unsetEvent() {
    this.event = null;
  }

  /** Returns true if field event is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent() {
    return this.event != null;
  }

  public void setEventIsSet(boolean value) {
    if (!value) {
      this.event = null;
    }
  }

  /**
   * 
   * @see EventType
   */
  public EventType getType() {
    return this.type;
  }

  /**
   * 
   * @see EventType
   */
  public QuarantineEvent setType(EventType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public QuarantineEvent setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public String getId() {
    return this.id;
  }

  public QuarantineEvent setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getPipelineId() {
    return this.pipelineId;
  }

  public QuarantineEvent setPipelineId(String pipelineId) {
    this.pipelineId = pipelineId;
    return this;
  }

  public void unsetPipelineId() {
    this.pipelineId = null;
  }

  /** Returns true if field pipelineId is set (has been assigned a value) and false otherwise */
  public boolean isSetPipelineId() {
    return this.pipelineId != null;
  }

  public void setPipelineIdIsSet(boolean value) {
    if (!value) {
      this.pipelineId = null;
    }
  }

  public String getPipeId() {
    return this.pipeId;
  }

  public QuarantineEvent setPipeId(String pipeId) {
    this.pipeId = pipeId;
    return this;
  }

  public void unsetPipeId() {
    this.pipeId = null;
  }

  /** Returns true if field pipeId is set (has been assigned a value) and false otherwise */
  public boolean isSetPipeId() {
    return this.pipeId != null;
  }

  public void setPipeIdIsSet(boolean value) {
    if (!value) {
      this.pipeId = null;
    }
  }

  public AdditionalMetadata getAdditionalMetadata() {
    return this.additionalMetadata;
  }

  public QuarantineEvent setAdditionalMetadata(AdditionalMetadata additionalMetadata) {
    this.additionalMetadata = additionalMetadata;
    return this;
  }

  public void unsetAdditionalMetadata() {
    this.additionalMetadata = null;
  }

  /** Returns true if field additionalMetadata is set (has been assigned a value) and false otherwise */
  public boolean isSetAdditionalMetadata() {
    return this.additionalMetadata != null;
  }

  public void setAdditionalMetadataIsSet(boolean value) {
    if (!value) {
      this.additionalMetadata = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EVENT:
      if (value == null) {
        unsetEvent();
      } else {
        setEvent((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((EventType)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case PIPELINE_ID:
      if (value == null) {
        unsetPipelineId();
      } else {
        setPipelineId((String)value);
      }
      break;

    case PIPE_ID:
      if (value == null) {
        unsetPipeId();
      } else {
        setPipeId((String)value);
      }
      break;

    case ADDITIONAL_METADATA:
      if (value == null) {
        unsetAdditionalMetadata();
      } else {
        setAdditionalMetadata((AdditionalMetadata)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EVENT:
      return getEvent();

    case TYPE:
      return getType();

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case ID:
      return getId();

    case PIPELINE_ID:
      return getPipelineId();

    case PIPE_ID:
      return getPipeId();

    case ADDITIONAL_METADATA:
      return getAdditionalMetadata();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EVENT:
      return isSetEvent();
    case TYPE:
      return isSetType();
    case TIMESTAMP:
      return isSetTimestamp();
    case ID:
      return isSetId();
    case PIPELINE_ID:
      return isSetPipelineId();
    case PIPE_ID:
      return isSetPipeId();
    case ADDITIONAL_METADATA:
      return isSetAdditionalMetadata();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QuarantineEvent)
      return this.equals((QuarantineEvent)that);
    return false;
  }

  public boolean equals(QuarantineEvent that) {
    if (that == null)
      return false;

    boolean this_present_event = true && this.isSetEvent();
    boolean that_present_event = true && that.isSetEvent();
    if (this_present_event || that_present_event) {
      if (!(this_present_event && that_present_event))
        return false;
      if (!this.event.equals(that.event))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_pipelineId = true && this.isSetPipelineId();
    boolean that_present_pipelineId = true && that.isSetPipelineId();
    if (this_present_pipelineId || that_present_pipelineId) {
      if (!(this_present_pipelineId && that_present_pipelineId))
        return false;
      if (!this.pipelineId.equals(that.pipelineId))
        return false;
    }

    boolean this_present_pipeId = true && this.isSetPipeId();
    boolean that_present_pipeId = true && that.isSetPipeId();
    if (this_present_pipeId || that_present_pipeId) {
      if (!(this_present_pipeId && that_present_pipeId))
        return false;
      if (!this.pipeId.equals(that.pipeId))
        return false;
    }

    boolean this_present_additionalMetadata = true && this.isSetAdditionalMetadata();
    boolean that_present_additionalMetadata = true && that.isSetAdditionalMetadata();
    if (this_present_additionalMetadata || that_present_additionalMetadata) {
      if (!(this_present_additionalMetadata && that_present_additionalMetadata))
        return false;
      if (!this.additionalMetadata.equals(that.additionalMetadata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QuarantineEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEvent()).compareTo(other.isSetEvent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event, other.event);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPipelineId()).compareTo(other.isSetPipelineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipelineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipelineId, other.pipelineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPipeId()).compareTo(other.isSetPipeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipeId, other.pipeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdditionalMetadata()).compareTo(other.isSetAdditionalMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdditionalMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.additionalMetadata, other.additionalMetadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QuarantineEvent(");
    boolean first = true;

    if (isSetEvent()) {
      sb.append("event:");
      if (this.event == null) {
        sb.append("null");
      } else {
        sb.append(this.event);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetPipelineId()) {
      if (!first) sb.append(", ");
      sb.append("pipelineId:");
      if (this.pipelineId == null) {
        sb.append("null");
      } else {
        sb.append(this.pipelineId);
      }
      first = false;
    }
    if (isSetPipeId()) {
      if (!first) sb.append(", ");
      sb.append("pipeId:");
      if (this.pipeId == null) {
        sb.append("null");
      } else {
        sb.append(this.pipeId);
      }
      first = false;
    }
    if (isSetAdditionalMetadata()) {
      if (!first) sb.append(", ");
      sb.append("additionalMetadata:");
      if (this.additionalMetadata == null) {
        sb.append("null");
      } else {
        sb.append(this.additionalMetadata);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (additionalMetadata != null) {
      additionalMetadata.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuarantineEventStandardSchemeFactory implements SchemeFactory {
    public QuarantineEventStandardScheme getScheme() {
      return new QuarantineEventStandardScheme();
    }
  }

  private static class QuarantineEventStandardScheme extends StandardScheme<QuarantineEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QuarantineEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EVENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.event = iprot.readString();
              struct.setEventIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = EventType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PIPELINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pipelineId = iprot.readString();
              struct.setPipelineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PIPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pipeId = iprot.readString();
              struct.setPipeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ADDITIONAL_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.additionalMetadata = new AdditionalMetadata();
              struct.additionalMetadata.read(iprot);
              struct.setAdditionalMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QuarantineEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.event != null) {
        if (struct.isSetEvent()) {
          oprot.writeFieldBegin(EVENT_FIELD_DESC);
          oprot.writeString(struct.event);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pipelineId != null) {
        if (struct.isSetPipelineId()) {
          oprot.writeFieldBegin(PIPELINE_ID_FIELD_DESC);
          oprot.writeString(struct.pipelineId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pipeId != null) {
        if (struct.isSetPipeId()) {
          oprot.writeFieldBegin(PIPE_ID_FIELD_DESC);
          oprot.writeString(struct.pipeId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.additionalMetadata != null) {
        if (struct.isSetAdditionalMetadata()) {
          oprot.writeFieldBegin(ADDITIONAL_METADATA_FIELD_DESC);
          struct.additionalMetadata.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuarantineEventTupleSchemeFactory implements SchemeFactory {
    public QuarantineEventTupleScheme getScheme() {
      return new QuarantineEventTupleScheme();
    }
  }

  private static class QuarantineEventTupleScheme extends TupleScheme<QuarantineEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QuarantineEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEvent()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetId()) {
        optionals.set(3);
      }
      if (struct.isSetPipelineId()) {
        optionals.set(4);
      }
      if (struct.isSetPipeId()) {
        optionals.set(5);
      }
      if (struct.isSetAdditionalMetadata()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetEvent()) {
        oprot.writeString(struct.event);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetPipelineId()) {
        oprot.writeString(struct.pipelineId);
      }
      if (struct.isSetPipeId()) {
        oprot.writeString(struct.pipeId);
      }
      if (struct.isSetAdditionalMetadata()) {
        struct.additionalMetadata.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QuarantineEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.event = iprot.readString();
        struct.setEventIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = EventType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pipelineId = iprot.readString();
        struct.setPipelineIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pipeId = iprot.readString();
        struct.setPipeIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.additionalMetadata = new AdditionalMetadata();
        struct.additionalMetadata.read(iprot);
        struct.setAdditionalMetadataIsSet(true);
      }
    }
  }

}

